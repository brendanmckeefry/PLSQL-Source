create or replace PACKAGE BODY FT_PK_GETSALES AS

  cVersionControlNo   VARCHAR2(12) := '1.0.5'; -- Current Version Number
  
  FUNCTION CURRENTVERSION(IN_BODYORSPEC IN INTEGER ) RETURN VARCHAR2
  IS

  BEGIN
    IF  IN_BODYORSPEC = CONST.C_SPEC THEN
      RETURN cSpecVersionControlNo;
    ELSE
      RETURN cVersionControlNo;
    END IF;
  END CURRENTVERSION;

  PROCEDURE GETSALES_INT(DPRRECNOS_IN RECORD_NUMBERS)
  IS

    TYPE  DPRTOLOTSKEY_TAB IS TABLE OF NUMBER(10) INDEX BY PLS_INTEGER;
    DPRTOLOTSKEYDYNARR DPRTOLOTSKEY_TAB;
    COUNTSI SMALLINT;
    DPRTOLOTSIDX  SMALLINT;
    DPRTOLOTSKEY  DPRSTOLOTS.DTLRECNO%TYPE;

    CURSOR DPRTOLOTS_CUR(DPRRECNO_IN INTEGER)
    IS
      SELECT *
      FROM DPRSTOLOTS
      WHERE DPRSTOLOTS.DTLDPRRECNO = DPRRECNO_IN
      ORDER BY DTLRECNO;

    CURSOR DPRSTOLOTSCHGS_CUR(DPRRECNO_IN INTEGER)
    IS
      SELECT *
      FROM DPRSTOLOTSCHGS, DPRSTOLOTS
      WHERE DPRSTOLOTSCHGS.DTLCHGSDTLRECNO = DPRSTOLOTS.DTLRECNO
      AND DPRSTOLOTS.DTLDPRRECNO = DPRRECNO_IN
      ORDER BY DTLCHGSRECNO;

    CURSOR BULKSALESCURSOR(DPRRECNO_IN INTEGER)
    IS
      SELECT delprice.dprrecno
      ,Itesto.istlitno
      ,delprice.dprdelrecno
      ,SUM(Case When (Abs(NVL(delprice.delprice, 0)) > 0.009
           OR Abs(NVL (delnettvalue, 0)) > 0.009
           OR NVL(DELPRICE.DELFREEOFCHG, 0) = 1) --exclude openprice
                then
                NVL(deltoist.DISSTKQTY,0)
                else
                0
                end) bulkqty

      ,SUM(Case When (Abs(NVL(delprice.delprice, 0)) > 0.009
           OR Abs(NVL (delnettvalue, 0)) > 0.009
           OR NVL(delprice.delfreeofchg, 0) = 1) --exclude openprice
                then
                NVL(deltoist.DISSTKQTY,0)
                else
                0
                END) SOLDQTY
      ,SUM(NVL(DELTOIST.DISNETTVALUE,0)) NETTVALUE
      ,SUM(Case When (Abs(NVL(delprice.delprice, 0)) > 0.009
           OR Abs(NVL (delnettvalue, 0)) > 0.009
           OR NVL(delprice.delfreeofchg, 0) = 1) --exclude openprice
                then
                0
                else
                NVL(deltoist.DISSTKQTY,0)
                end) OpenPrcQty,
      delhed.DlvOrdNo,
      delhed.DlvSalOffNo
        From Deltoist,deldet, delprice, delhed, itesto, Purord
        Where delprice.dprrecno = Deltoist.disdprrecno
        and deltoist.DISISTRECNO = Itesto.ISTRECNO
        And delprice.dprdelrecno = deldet.delrecno
        and deldet.deldlvordno = delhed.dlvordno
        And Itesto.IstPoNo = PurOrd.PorNo
        AND (delhed.dlvrelinv <> 'Pik') -- Exclude updated pik status
        AND (delhed.dlvtransship IS NULL OR NVL (delhed.transferflg, 0) > 0)
        AND NVL (DELHED.DLVSALTYP, 'S') <> 'R'
        AND delprice.DPRRECNO  = DPRRECNO_IN
        AND NOT exists ( Select 1
                         from DPRSTOLOTS checkIt
                         Where checkit.DTLDPRRECNO = Delprice.DprRecNo
                         AND CHECKIT.DTLLITITENO = ITESTO.ISTLITNO)
        GROUP BY  DELPRICE.DPRRECNO, ITESTO.ISTLITNO, DELPRICE.DELPRICE, DELNETTVALUE, DELFREEOFCHG, DPRDELRECNO, DELHED.DLVORDNO, DELHED.DLVSALOFFNO
        ORDER BY DELPRICE.DPRRECNO, ITESTO.ISTLITNO, DELPRICE.DELPRICE, DELNETTVALUE, DELFREEOFCHG, DPRDELRECNO, DELHED.DLVORDNO, DELHED.DLVSALOFFNO;

  cursor PREPSALESCURSOR(DPRRECNO_IN integer)
    is
      select
      DELPRICE.DPRRECNO
     ,ITESTO.ISTLITNO
     ,DELPRICE.DPRDELRECNO
     ,SUM( case when (ABS(NVL(DELPRICE.DELPRICE, 0)) > 0.009
               or ABS(NVL (DELNETTVALUE, 0)) > 0.009
               or NVL(DELPRICE.DELFREEOFCHG, 0) = 1
              ) --exclude openprice
                then
                    case
                    when NVL (PREPALINOUT.INISWGTCNT, 0) = 0
                    then  case
                          when NVL(PREPALINOUT.PPPALOUTQTY,0) = 0
                          then 0
                          else (NVL(TO_NUMBER(NVL(PREPALINOUT.PPALINQTYDEC,PREPALINOUT.PPPALINQTY)) ,0) * NVL(PREPALINOUTSALES.DPRQTYTHIS,0))
                               / TO_NUMBER(PREPALINOUT.PPPALOUTQTY)
                          end
                    else  case when NVL(PREPALINOUT.PPPALOUTQTY,0) = 0
                          then 0
                          else (NVL(TO_NUMBER(NVL(PREPALINOUT.PPALINQTYDEC,PREPALINOUT.PPPALINQTY)) ,0) * NVL(PREPALINOUTSALES.DPRQTYTHIS,0))
                               / TO_NUMBER(PREPALINOUT.PPPALOUTQTY)
                          end / NVL(NULLIF(PREPALINOUT.BOXWGTIN, 0.0), 1)
                    end
                else
                    0
                end) BULKQTY
     ,SUM (case when (ABS(NVL(DELPRICE.DELPRICE, 0)) > 0.009
               or ABS(NVL (DELNETTVALUE, 0)) > 0.009
               or NVL(DELPRICE.DELFREEOFCHG, 0) = 1
              ) --exclude openprice
                then
                    NVL(DPRQTYTHIS,0)
                else
                    0
                end) SOLDQTY
     ,SUM(NVL(DPRBASEVALTHIS,0)) NETTVALUE
     ,SUM (case when (ABS(NVL(DELPRICE.DELPRICE, 0)) > 0.009
               or ABS(NVL (DELNETTVALUE, 0)) > 0.009
               or NVL(DELPRICE.DELFREEOFCHG, 0) = 1
              ) --exclude openprice
                then
                    0
                else
                    case
                    when NVL (PREPALINOUT.INISWGTCNT, 0) = 0
                    then  case
                          when NVL(PREPALINOUT.PPPALOUTQTY,0) = 0
                          then 0
                          else (NVL(TO_NUMBER(NVL(PREPALINOUT.PPALINQTYDEC,PREPALINOUT.PPPALINQTY)) ,0) * NVL(PREPALINOUTSALES.DPRQTYTHIS,0))
                               / TO_NUMBER(PREPALINOUT.PPPALOUTQTY)
                          end
                    else  case when NVL(PREPALINOUT.PPPALOUTQTY,0) = 0
                          then 0
                          else (NVL(TO_NUMBER(NVL(PREPALINOUT.PPALINQTYDEC,PREPALINOUT.PPPALINQTY)) ,0) * NVL(PREPALINOUTSALES.DPRQTYTHIS,0))
                               / TO_NUMBER(PREPALINOUT.PPPALOUTQTY)
                          end / NVL(NULLIF(PREPALINOUT.BOXWGTIN, 0.0), 1)
                    end
                end) OPENPRCQTY,
      DELHED.DLVORDNO,
      DELHED.DLVSALOFFNO,
      PREPALINOUT.PALOUTWORECNO
      from PREPALINOUT, PREPALINOUTSALES, DELPRICE, DELDET, DELHED, ITESTO
      where ITESTO.ISTRECNO = PREPALINOUT.PALINBULKISTREC
      and PREPALINOUT.PREPALRECNO = PREPALINOUTSALES.PREPALINOUTRECNO
      and PREPALINOUTSALES.DELPRCRECNO = DELPRICE.DPRRECNO
      and DELPRICE.DPRDELRECNO = DELDET.DELRECNO
      and DELDET.DELDLVORDNO = DELHED.DLVORDNO
      and (DELHED.DLVRELINV <> 'Pik') -- Exclude updated pik status
      and (DELHED.DLVTRANSSHIP is null or NVL (DELHED.TRANSFERFLG, 0) > 0)
      and NVL (DELHED.DLVSALTYP, 'S') <> 'R'
      and DELPRICE.DPRRECNO = DPRRECNO_IN
      and not exists (select 1
                      from DPRSTOLOTS CHECKIT
                      where CHECKIT.DTLDPRRECNO = DELPRICE.DPRRECNO
                      and CHECKIT.DTLLITITENO = ITESTO.ISTLITNO
                      and CHECKIT.DTLWORECNO = PREPALINOUT.PALOUTWORECNO)
      group by DELPRICE.DPRRECNO, ITESTO.ISTLITNO, DELPRICE.DELPRICE, DELNETTVALUE, DELPRICE.DELFREEOFCHG
      , DELPRICE.DPRDELRECNO, DELHED.DLVORDNO, DELHED.DLVSALOFFNO, PREPALINOUT.PALOUTWORECNO
      ORDER BY DELPRICE.DPRRECNO, ITESTO.ISTLITNO, DELPRICE.DELPRICE, DELNETTVALUE, DELPRICE.DELFREEOFCHG
      ,DELPRICE.DPRDELRECNO, DELHED.DLVORDNO, DELHED.DLVSALOFFNO, PREPALINOUT.PALOUTWORECNO;

  cursor BULKDPRCHGS(DPRRECNO_IN integer)
        is
          select ICHRECNO
          ,DTLRECNO
          ,case when ABS(DPRSTOLOTS.DTLOPENPRCQTY) > 0.009
                then
                  0
                else
                   case when (EXCTOBASERATE = 1.00 or EXCTOBASERATE < 0.000009)
                        then NVL(ICHAPPAMT,0)
                        else  ROUND(NVL(ICHAPPAMT,0) / EXCTOBASERATE,2)
                        end
                end RAWAPPAMT
          ,case when ABS(DPRSTOLOTS.DTLOPENPRCQTY) > 0.009
                then
                  0
                else
                  NVL(ICHAPPAMT,0)
                end ICHAPPAMT
          ,NVL(EXPCHA.EXCRECOVFROMPL, 0) EXCRECOVFROMPL
          ,CHGTYP.CTYNO
          ,CHGTYP.CHARGECLASS
          ,1 DTLCHGSTYPNO
          from ITECHG,EXPCHA,ITESTO, PURORD, DPRSTOLOTS, CHGTYP
          where ITECHG.DPRRECNO = DPRRECNO_IN
          and ICHISTRECNO = ITESTO.ISTRECNO
          and ITECHG.EXCRECNO = EXPCHA.EXCCHAREC
          and ITESTO.ISTPONO = PURORD.PORNO
          and CHGTYP.CTYNO = ITECHG.CTYNO
          and ABS(NVL(ICHAPPAMT,0)) > 0.009
          and DPRSTOLOTS.DTLDPRRECNO = ITECHG.DPRRECNO
          and DPRSTOLOTS.DTLLITITENO = ITESTO.ISTLITNO
          and DPRSTOLOTS.DTLWORECNO is null
          and not exists (select 1
                          from DPRSTOLOTSCHGS CHECKIT
                          where CHECKIT.DTLCHGSDTLRECNO =  DPRSTOLOTS.DTLRECNO
                          AND CHECKIT.DTLCHGSICHNO = ITECHG.ICHRECNO)
          ORDER BY ICHRECNO,DTLRECNO;

  CURSOR PREPDPRCHGS(DPRRECNO_IN INTEGER)
  IS
            SELECT ICHRECNO
            ,DTLRECNO
            ,SUM(NVL(RAWAPPAMTPERBULKLOT,0)) RAWAPPAMT
            ,SUM(NVL(APPAMTPERBULKLOT,0)) ICHAPPAMT
            ,NVL(EXCRECOVFROMPL,0) EXCRECOVFROMPL
            ,CTYNO
            ,CHARGECLASS
            ,1 DTLCHGSTYPNO
            FROM(SELECT PRECHGS.ICHRECNO
                  ,PRECHGS.LITITENO
                  ,PRECHGS.DPRRECNO
                  ,PRECHGS.ICHAPPAMT
                  ,PRECHGS.RAWAPPAMT
                  ,PRECHGS.DPRQTYTHIS
                  ,PRECHGS.DISQTY
                  ,DPRSTOLOTS.DTLRECNO
                  ,ROUND(
                    CASE WHEN ABS(DPRSTOLOTS.DTLOPENPRCQTY) > 0.009
                    THEN
                      0
                    ELSE
                      CASE WHEN NVL(DPRISPRICEADJONLY,0) = 1
                      THEN
                        CASE WHEN ABS(PRECHGS.DISNETTVALUE) > 0 THEN (NVL(ICHAPPAMT,0) * ABS(PRECHGS.DPRBASEVALTHIS)) / ABS(PRECHGS.DISNETTVALUE)  ELSE 0 END
                      ELSE
                        CASE WHEN ABS(PRECHGS.DISQTY) > 0 THEN (NVL(ICHAPPAMT,0) * ABS(PRECHGS.DPRQTYTHIS)) / ABS(PRECHGS.DISQTY)  ELSE 0 END
                      END
                    END,2) APPAMTPERBULKLOT
                  ,ROUND(
                    CASE WHEN ABS(DPRSTOLOTS.DTLOPENPRCQTY) > 0.009
                    THEN
                      0
                    ELSE
                      CASE WHEN NVL(DPRISPRICEADJONLY,0) = 1
                      THEN
                        CASE WHEN ABS(PRECHGS.DISNETTVALUE) > 0 THEN (NVL(RAWAPPAMT,0) * ABS(PRECHGS.DPRBASEVALTHIS)) / ABS(PRECHGS.DISNETTVALUE)  ELSE 0 END
                      ELSE
                        CASE WHEN ABS(PRECHGS.DISQTY) > 0 THEN (NVL(RAWAPPAMT,0) * ABS(PRECHGS.DPRQTYTHIS)) / ABS(PRECHGS.DISQTY)  ELSE 0 END
                      END
                    END,2)  RAWAPPAMTPERBULKLOT
                  ,PRECHGS.EXCRECOVFROMPL
                  ,PRECHGS.CTYNO
                  ,PRECHGS.CHARGECLASS
                  ,PRECHGS.PALOUTWORECNO
                  FROM(
                        SELECT ICHRECNO
                        ,BULKLOTITE.LITITENO
                        ,ITECHG.DPRRECNO
                        ,NVL(ICHAPPAMT,0) ICHAPPAMT
                        ,CASE WHEN (EXCTOBASERATE = 1.00 OR EXCTOBASERATE < 0.000009) THEN NVL(ICHAPPAMT,0) ELSE  ROUND(NVL(ICHAPPAMT,0) / EXCTOBASERATE,2) END RAWAPPAMT
                        ,NVL(PREPALINOUTSALES.DPRQTYTHIS,0) DPRQTYTHIS
                        ,NVL(PREPALINOUTSALES.DPRBASEVALTHIS,0) DPRBASEVALTHIS
                        ,NVL(DELTOIST.DISQTY, 0) DISQTY
                        ,NVL(DELTOIST.DISNETTVALUE, 0) DISNETTVALUE
                        ,NVL(EXPCHA.EXCRECOVFROMPL, 0) EXCRECOVFROMPL
                        ,CHGTYP.CTYNO
                        ,CHGTYP.CHARGECLASS
                        ,DELPRICE.DPRISPRICEADJONLY
                        ,PREPALINOUT.PALOUTWORECNO
                        FROM ITECHG,EXPCHA,ITESTO PREPIST, LOTITE PREPLOT, PREPALINOUT, PREPALINOUTSALES, ITESTO BULKIST, LOTITE BULKLOTITE, DELTOIST,DELPRICE,CHGTYP
                        WHERE ITECHG.ICHISTRECNO = PREPIST.ISTRECNO
                        AND ITECHG.DPRRECNO = DPRRECNO_IN
                        AND  ITECHG.ICHISTRECNO = DELTOIST.DISISTRECNO
                        AND ITECHG.DPRRECNO = DELPRICE.DPRRECNO
                        AND DELTOIST.DISDPRRECNO = ITECHG.DPRRECNO
                        AND ITECHG.EXCRECNO = EXPCHA.EXCCHAREC
                        AND ITECHG.CTYNO = CHGTYP.CTYNO
                        AND PREPIST.ISTLITNO = PREPLOT.LITITENO
                        AND PREPLOT.LITWORECNO = PREPALINOUT.PALOUTWORECNO
                        AND PREPALINOUT.PREPALRECNO = PREPALINOUTSALES.PREPALINOUTRECNO
                        AND PREPALINOUTSALES.DELPRCRECNO = ITECHG.DPRRECNO
                        AND PREPALINOUT.PALINBULKISTREC = BULKIST.ISTRECNO
                        AND BULKIST.ISTLITNO = BULKLOTITE.LITITENO
                        AND ABS(NVL(ICHAPPAMT,0)) > 0.009) PRECHGS,DPRSTOLOTS
                  WHERE DPRSTOLOTS.DTLDPRRECNO = PRECHGS.DPRRECNO
                  AND DPRSTOLOTS.DTLLITITENO = PRECHGS.LITITENO
                  AND DPRSTOLOTS.DTLWORECNO = PRECHGS.PALOUTWORECNO
                  AND NOT EXISTS (SELECT 1
                                  FROM DPRSTOLOTSCHGS CHECKIT
                                  WHERE CHECKIT.DTLCHGSDTLRECNO =  DPRSTOLOTS.DTLRECNO
                                  AND CHECKIT.DTLCHGSICHNO = PRECHGS.ICHRECNO))
            GROUP BY ICHRECNO,DTLRECNO,EXCRECOVFROMPL,CTYNO,CHARGECLASS
            ORDER BY ICHRECNO,DTLRECNO,EXCRECOVFROMPL,CTYNO,CHARGECLASS;

  CURSOR PREPCHGNULLISTCURSOR(DPRRECNO_IN INTEGER)
  IS
    SELECT PRECHGS.ICHRECNO
    ,PRECHGS.DTLRECNO
    , ROUND(
            CASE WHEN ABS(PRECHGS.DTLOPENPRCQTY) > 0.009
            THEN
               0
            ELSE
               CASE WHEN NVL(DPRISPRICEADJONLY,0) = 1
                THEN
                  CASE WHEN ABS(PRECHGS.DELNETTVALUE) > 0 THEN (NVL(RAWAPPAMT,0) * ABS(PRECHGS.DTLSALESVALUE)) / ABS(PRECHGS.DELNETTVALUE)  ELSE 0 END
                ELSE
                  CASE WHEN ABS(PRECHGS.DELPRCQTY) > 0 THEN (NVL(RAWAPPAMT,0) * ABS(PRECHGS.DTLSOLDSALESQTY)) / ABS(PRECHGS.DELPRCQTY)  ELSE 0 END
                END
            END,2) RAWAPPAMTPERBULKLOT

    , ROUND(CASE WHEN ABS(PRECHGS.DTLOPENPRCQTY) > 0.009
            THEN
               0
            ELSE
              CASE WHEN NVL(DPRISPRICEADJONLY,0) = 1
              THEN
                CASE WHEN ABS(PRECHGS.DELNETTVALUE) > 0 THEN (NVL(ICHAPPAMT,0) * ABS(PRECHGS.DTLSALESVALUE)) / ABS(PRECHGS.DELNETTVALUE)  ELSE 0 END
              ELSE
                CASE WHEN ABS(PRECHGS.DELPRCQTY) > 0 THEN (NVL(ICHAPPAMT,0) * ABS(PRECHGS.DTLSOLDSALESQTY)) / ABS(PRECHGS.DELPRCQTY)  ELSE 0 END
              END
            END, 2) APPAMTPERBULKLOT
    ,PRECHGS.EXCRECOVFROMPL
    ,PRECHGS.CTYNO
    ,PRECHGS.CHARGECLASS
    ,1 DTLCHGSTYPNO
    FROM (
    SELECT DTLRECNO
    , DTLDPRRECNO
    , DTLLITITENO
    , DTLSOLDSALESQTY
    , DELPRCQTY
    , DELPRICE.DELNETTVALUE
    , ICHRECNO
    ,CASE WHEN (EXCTOBASERATE = 1.00 OR EXCTOBASERATE < 0.000009) THEN NVL(ICHAPPAMT,0) ELSE  ROUND(NVL(ICHAPPAMT,0) / EXCTOBASERATE,2) END RAWAPPAMT
    ,ICHAPPAMT
    ,NVL(EXPCHA.EXCRECOVFROMPL,0) EXCRECOVFROMPL
    ,CHGTYP.CTYNO
    ,CHGTYP.CHARGECLASS
    ,DELPRICE.DPRRECNO
    ,DTLSALESVALUE
    ,NVL(DPRISPRICEADJONLY,0) DPRISPRICEADJONLY
    ,DTLOPENPRCQTY
    FROM ITECHG,EXPCHA, DELPRICE, DPRSTOLOTS, CHGTYP
    WHERE ICHISTRECNO IS NULL
    AND ITECHG.EXCRECNO = EXPCHA.EXCCHAREC
    AND ITECHG.CTYNO = CHGTYP.CTYNO
    AND ITECHG.DPRRECNO = DELPRICE.DPRRECNO
    AND ITECHG.DPRRECNO = DPRRECNO_IN
    AND ABS(NVL(ICHAPPAMT,0)) > 0.009
    AND DPRSTOLOTS.DTLDPRRECNO = ITECHG.DPRRECNO
    AND NOT EXISTS (SELECT 1
                    FROM DPRSTOLOTSCHGS CHECKIT
                    WHERE CHECKIT.DTLCHGSDTLRECNO =  DPRSTOLOTS.DTLRECNO
                    AND CHECKIT.DTLCHGSICHNO = ITECHG.ICHRECNO)


    )PRECHGS
    ORDER BY PRECHGS.ICHRECNO ,PRECHGS.DTLRECNO;

  CURSOR PREPSALESCHGNOEXPCUR(DPRRECNO_IN INTEGER)
  IS
    SELECT PRECHGS.ICHRECNO
   ,PRECHGS.DTLRECNO
   , ROUND(
           CASE WHEN ABS(PRECHGS.DTLOPENPRCQTY) > 0.009
           THEN
              0
           ELSE
              CASE WHEN NVL(DPRISPRICEADJONLY,0) = 1
               THEN
                 CASE WHEN ABS(PRECHGS.DELNETTVALUE) > 0 THEN (NVL(RAWAPPAMT,0) * ABS(PRECHGS.DTLSALESVALUE)) / ABS(PRECHGS.DELNETTVALUE)  ELSE 0 END
               ELSE
                 CASE WHEN ABS(PRECHGS.DELPRCQTY) > 0 THEN (NVL(RAWAPPAMT,0) * ABS(PRECHGS.DTLSOLDSALESQTY)) / ABS(PRECHGS.DELPRCQTY)  ELSE 0 END
               END
           END,2) RAWAPPAMTPERBULKLOT

   , ROUND(CASE WHEN ABS(PRECHGS.DTLOPENPRCQTY) > 0.009
           THEN
              0
           ELSE
             CASE WHEN NVL(DPRISPRICEADJONLY,0) = 1
             THEN
               CASE WHEN ABS(PRECHGS.DELNETTVALUE) > 0 THEN (NVL(ICHAPPAMT,0) * ABS(PRECHGS.DTLSALESVALUE)) / ABS(PRECHGS.DELNETTVALUE)  ELSE 0 END
             ELSE
               CASE WHEN ABS(PRECHGS.DELPRCQTY) > 0 THEN (NVL(ICHAPPAMT,0) * ABS(PRECHGS.DTLSOLDSALESQTY)) / ABS(PRECHGS.DELPRCQTY)  ELSE 0 END
             END
           END, 2) APPAMTPERBULKLOT
   ,PRECHGS.EXCRECOVFROMPL
   ,PRECHGS.CTYNO
   ,PRECHGS.CHARGECLASS
   ,1 DTLCHGSTYPNO
   FROM (
   SELECT DTLRECNO
   , DTLDPRRECNO
   , DTLLITITENO
   , DTLSOLDSALESQTY
   , DELPRCQTY
   , DELPRICE.DELNETTVALUE
   , ICHRECNO
   ,CASE WHEN (DELTOBASERATE = 1.00 OR DELTOBASERATE < 0.000009) THEN NVL(ICHAPPAMT,0) ELSE  ROUND(NVL(ICHAPPAMT,0) / DELTOBASERATE,2) END RAWAPPAMT
   ,ICHAPPAMT
   ,0 EXCRECOVFROMPL
   ,CHGTYP.CTYNO
   ,CHGTYP.CHARGECLASS
   ,DELPRICE.DPRRECNO
   ,DTLSALESVALUE
   ,NVL(DPRISPRICEADJONLY,0) DPRISPRICEADJONLY
   ,DTLOPENPRCQTY
   FROM ITECHG, DELPRICE, DPRSTOLOTS, CHGTYP
   WHERE ICHISTRECNO IS NULL
   AND ITECHG.EXCRECNO IS NULL
   AND ITECHG.CTYNO = CHGTYP.CTYNO
   AND ITECHG.DPRRECNO = DELPRICE.DPRRECNO
   AND ITECHG.DPRRECNO = DPRRECNO_IN
   AND ABS(NVL(ICHAPPAMT,0)) > 0.009
   AND DPRSTOLOTS.DTLDPRRECNO = ITECHG.DPRRECNO
   AND NOT EXISTS (SELECT 1
                   FROM DPRSTOLOTSCHGS CHECKIT
                   WHERE CHECKIT.DTLCHGSDTLRECNO =  DPRSTOLOTS.DTLRECNO
                   AND CHECKIT.DTLCHGSICHNO = ITECHG.ICHRECNO)
   )PRECHGS
   ORDER BY PRECHGS.ICHRECNO,PRECHGS.DTLRECNO;

   CURSOR SALESRTECHGS(DPRRECNO_IN INTEGER)
   IS
      SELECT PRECHGS.ICHRECNO
      ,PRECHGS.DTLRECNO
      , ROUND(
              CASE WHEN ABS(PRECHGS.DTLOPENPRCQTY) > 0.009
              THEN
                 0
              ELSE
                 CASE WHEN ABS(PRECHGS.DELPRCQTY) > 0 THEN (NVL(RAWAPPAMT,0) * ABS(PRECHGS.DTLSOLDSALESQTY)) / ABS(PRECHGS.DELPRCQTY)  ELSE 0 END
              END,2) RAWAPPAMTPERBULKLOT

      , ROUND(CASE WHEN ABS(PRECHGS.DTLOPENPRCQTY) > 0.009
              THEN
                 0
              ELSE
                 CASE WHEN ABS(PRECHGS.DELPRCQTY) > 0 THEN (NVL(ICHAPPAMT,0) * ABS(PRECHGS.DTLSOLDSALESQTY)) / ABS(PRECHGS.DELPRCQTY)  ELSE 0 END
              END, 2) APPAMTPERBULKLOT
      ,PRECHGS.EXCRECOVFROMPL
      ,PRECHGS.CTYNO
      ,PRECHGS.CHARGECLASS
      ,3 DTLCHGSTYPNO
      FROM (
      SELECT DTLRECNO
      , DTLDPRRECNO
      , DTLLITITENO
      , DTLSOLDSALESQTY
      , DELPRCQTY
      , DELPRICE.DELNETTVALUE
      , ICHRECNO
      , CASE WHEN NVL(DELQTY,0) > 0
             THEN
            (CASE WHEN (EXCTOBASERATE = 1.00 OR EXCTOBASERATE < 0.000009)
                 THEN NVL(ICHAPPAMT,0)
                 ELSE  ROUND(NVL(ICHAPPAMT,0) / EXCTOBASERATE,2)
                 END * NVL(CAST(DELPRCQTY AS FLOAT),0)) / CAST(DELQTY AS FLOAT)
         ELSE 0
         END RAWAPPAMT
      , CASE  WHEN NVL(DELQTY,0) > 0
              THEN (NVL(ICHAPPAMT,0) * NVL(CAST(DELPRCQTY AS FLOAT),0)) / CAST(DELQTY AS FLOAT)
              ELSE 0
              END ICHAPPAMT---Split price issue resolved
      ,NVL(EXPCHA.EXCRECOVFROMPL,0) EXCRECOVFROMPL
      ,CHGTYP.CTYNO
      ,CHGTYP.CHARGECLASS
      ,DELPRICE.DPRRECNO
      ,DTLSALESVALUE
      ,NVL(DPRISPRICEADJONLY,0) DPRISPRICEADJONLY
      ,DTLOPENPRCQTY
      FROM ITECHG,EXPCHA, DELPRICE, DPRSTOLOTS, CHGTYP, DELDET
      WHERE ICHISTRECNO IS NULL
      AND ITECHG.EXCRECNO = EXPCHA.EXCCHAREC
      AND ITECHG.CTYNO = CHGTYP.CTYNO
      AND ITECHG.DELRECNO = DELDET.DELRECNO
      AND DELPRICE.DPRDELRECNO  = DELDET.DELRECNO
      AND NVL(DPRISPRICEADJONLY,0) = 0
      AND NOT EXISTS (SELECT 1 FROM DELTOCDT WHERE CDTDPRRECNO = DELPRICE.DPRRECNO)
                      AND DELPRICE.DPRRECNO = DPRRECNO_IN
                      AND ABS(NVL(ICHAPPAMT,0)) > 0.009
                      AND DPRSTOLOTS.DTLDPRRECNO = DELPRICE.DPRRECNO
                      AND NOT EXISTS (SELECT 1
                                      FROM DPRSTOLOTSCHGS CHECKIT
                                      WHERE CHECKIT.DTLCHGSDTLRECNO =  DPRSTOLOTS.DTLRECNO
                                      AND CHECKIT.DTLCHGSICHNO = ITECHG.ICHRECNO)
                      )PRECHGS
      ORDER BY PRECHGS.ICHRECNO,PRECHGS.DTLRECNO;

      CURSOR DOSALESROUNDINGCUR(DPRRECNO_IN INTEGER)
      IS
        SELECT ITECHG.ICHRECNO,ITECHG.ICHAPPAMT, MAX(DPRSTOLOTSCHGS.DTLCHGSRECNO) MAXDTLCHGSRECNO, NVL(ITECHG.ICHAPPAMT,0) - SUM(NVL(DPRSTOLOTSCHGS.DTLCHGSBASEAPP,0)) ROUNDDIFF
        FROM ITECHG, DPRSTOLOTSCHGS , DPRSTOLOTS
        WHERE DPRSTOLOTSCHGS.DTLCHGSICHNO = ITECHG.ICHRECNO
        AND DPRSTOLOTSCHGS.DTLCHGSDTLRECNO = DPRSTOLOTS.DTLRECNO
        AND DPRSTOLOTS.DTLDPRRECNO = DPRRECNO_IN
        AND DPRSTOLOTSCHGS.DTLCHGSTYPNO <> 2 ---Sales costs ONLY - 1 = DprChgs, 2 = PurchaseChg, 3 = DelChgs
        AND ABS(NVL(DPRSTOLOTS.DTLOPENPRCQTY,0)) < 0.009 --exclude openprice
        GROUP BY ITECHG.ICHRECNO, ITECHG.ICHAPPAMT, DPRRECNO
        HAVING ABS(NVL(ITECHG.ICHAPPAMT,0) - SUM(DPRSTOLOTSCHGS.DTLCHGSBASEAPP)) > 0.009
        ORDER BY ITECHG.ICHRECNO;

  BEGIN
    
    FOR DPRREC IN DPRRECNOS_IN.FIRST..DPRRECNOS_IN.LAST LOOP
      COUNTSI := 0;
      DPRTOLOTSKEYDYNARR.DELETE;

      FOR DPRTOLOTCHGSREC IN DPRSTOLOTSCHGS_CUR(DPRRECNOS_IN(DPRREC)) LOOP
        DELETE FROM DPRSTOLOTSCHGS WHERE DPRSTOLOTSCHGS.DTLCHGSRECNO = DPRTOLOTCHGSREC.DTLCHGSRECNO;
        COMMIT;
      END LOOP;

      FOR DPRTOLOTREC IN DPRTOLOTS_CUR(DPRRECNOS_IN(DPRREC)) LOOP
        DELETE FROM DPRSTOLOTS WHERE DPRSTOLOTS.DTLRECNO = DPRTOLOTREC.DTLRECNO;
        COMMIT;
      END LOOP;

      FOR BULKSALESREC IN BULKSALESCURSOR(DPRRECNOS_IN(DPRREC))
      LOOP
        COUNTSI := COUNTSI + 1;
              INSERT INTO DPRSTOLOTS(DTLDPRRECNO,
                                    DTLLITITENO,
                                    DTLDELRECNO,
                                    DTLBULKSALESQTY,
                                    DTLSOLDSALESQTY,
                                    DTLSALESVALUE,
                                    DTLOPENPRCQTY,
                                    DTLDLVORDNO,
                                    DTLSALOFFNO)
                            SELECT BULKSALESREC.DPRRECNO,
                                   BULKSALESREC.ISTLITNO,
                                   BULKSALESREC.DPRDELRECNO,
                                   BULKSALESREC.BULKQTY,
                                   BULKSALESREC.SOLDQTY,
                                   BULKSALESREC.NETTVALUE,
                                   BULKSALESREC.OPENPRCQTY,
                                   BULKSALESREC.DLVORDNO,
                                   BULKSALESREC.DLVSALOFFNO
                                   FROM DUAL
                                   WHERE NOT EXISTS(SELECT 1 
                                                    FROM DPRSTOLOTS CHECKIT 
                                                    WHERE CHECKIT.DTLDPRRECNO = BULKSALESREC.DPRRECNO
                                                    AND CHECKIT.DTLLITITENO = BULKSALESREC.ISTLITNO
                                                    AND CHECKIT.DTLWORECNO IS NULL);
        
        COMMIT;
        
        SELECT DTLRECNO INTO DPRTOLOTSKEY 
        FROM DPRSTOLOTS 
        WHERE  DPRSTOLOTS.DTLDPRRECNO = BULKSALESREC.DPRRECNO 
        AND DPRSTOLOTS.DTLLITITENO = BULKSALESREC.ISTLITNO 
        AND DPRSTOLOTS.DTLWORECNO IS NULL;

        DPRTOLOTSKEYDYNARR(COUNTSI) := DPRTOLOTSKEY;
      END LOOP;

      FOR PREPSALESREC IN PREPSALESCURSOR(DPRRECNOS_IN(DPRREC))
      LOOP
        COUNTSI := COUNTSI + 1;
        INSERT INTO DPRSTOLOTS(DTLDPRRECNO,
                              DTLLITITENO,
                              DTLDELRECNO,
                              DTLBULKSALESQTY,
                              DTLSOLDSALESQTY,
                              DTLSALESVALUE,
                              DTLOPENPRCQTY,
                              DTLDLVORDNO,
                              DTLSALOFFNO,
                              DTLWORECNO)
                    SELECT   PREPSALESREC.DPRRECNO,
                             PREPSALESREC.ISTLITNO,
                             PREPSALESREC.DPRDELRECNO,
                             PREPSALESREC.BULKQTY,
                             PREPSALESREC.SOLDQTY,
                             PREPSALESREC.NETTVALUE,
                             PREPSALESREC.OPENPRCQTY,
                             PREPSALESREC.DLVORDNO,
                             PREPSALESREC.DLVSALOFFNO,
                             PREPSALESREC.PALOUTWORECNO
                             FROM DUAL
                             WHERE NOT EXISTS(SELECT 1 
                                              FROM DPRSTOLOTS CHECKIT 
                                              WHERE CHECKIT.DTLDPRRECNO = PREPSALESREC.DPRRECNO
                                              AND CHECKIT.DTLLITITENO = PREPSALESREC.ISTLITNO
                                              AND CHECKIT.DTLWORECNO  = PREPSALESREC.PALOUTWORECNO);
                                          
        COMMIT;
        
        SELECT DTLRECNO INTO DPRTOLOTSKEY 
        FROM DPRSTOLOTS 
        WHERE  DPRSTOLOTS.DTLDPRRECNO = PREPSALESREC.DPRRECNO 
        AND DPRSTOLOTS.DTLLITITENO = PREPSALESREC.ISTLITNO 
        AND DPRSTOLOTS.DTLWORECNO  = PREPSALESREC.PALOUTWORECNO;
                                   
        DPRTOLOTSKEYDYNARR(COUNTSI) := DPRTOLOTSKEY;
      END LOOP;

      DPRTOLOTSIDX := DPRTOLOTSKEYDYNARR.FIRST;

      WHILE DPRTOLOTSIDX IS NOT NULL 
      LOOP

        UPDATE DPRSTOLOTS
        SET ISTRANSDEL = 1
        WHERE EXISTS(SELECT * FROM TRANSFEROWNER WHERE DTLDELRECNO = TROTRANDELRECNO AND ISTRANSHIPONLY = 0)
        AND DTLRECNO = DPRTOLOTSKEYDYNARR(DPRTOLOTSIDX);
        DPRTOLOTSIDX := DPRTOLOTSKEYDYNARR.NEXT(DPRTOLOTSIDX);
        
        COMMIT;
            
      END LOOP;

      FOR BULKDPRCHGREC IN BULKDPRCHGS(DPRRECNOS_IN(DPRREC))
      LOOP
        INSERT INTO DPRSTOLOTSCHGS(DTLCHGSICHNO
                            ,DTLCHGSDTLRECNO
                            ,DTLCHGSRAWAPP
                            ,DTLCHGSBASEAPP
                            ,DTLCHGSEXCLFROMPL
                            ,DTLCHGSCTYNO
                            ,DTLCHGSCHARGECLASS
                            ,DTLCHGSTYPNO)
                  SELECT   BULKDPRCHGREC.ICHRECNO,
                           BULKDPRCHGREC.DTLRECNO,
                           BULKDPRCHGREC.RAWAPPAMT,
                           BULKDPRCHGREC.ICHAPPAMT,
                           BULKDPRCHGREC.EXCRECOVFROMPL,
                           BULKDPRCHGREC.CTYNO,
                           BULKDPRCHGREC.CHARGECLASS,
                           BULKDPRCHGREC.DTLCHGSTYPNO
                           FROM DUAL
                           WHERE NOT EXISTS (SELECT 1
                                             FROM DPRSTOLOTSCHGS CHECKIT
                                             WHERE CHECKIT.DTLCHGSDTLRECNO = BULKDPRCHGREC.DTLRECNO
                                             AND CHECKIT.DTLCHGSICHNO = BULKDPRCHGREC.ICHRECNO);
        COMMIT;

      END LOOP;

      FOR PREPDPRCHGREC IN PREPDPRCHGS(DPRRECNOS_IN(DPRREC))
      LOOP
        INSERT INTO DPRSTOLOTSCHGS(DTLCHGSICHNO
                            ,DTLCHGSDTLRECNO
                            ,DTLCHGSRAWAPP
                            ,DTLCHGSBASEAPP
                            ,DTLCHGSEXCLFROMPL
                            ,DTLCHGSCTYNO
                            ,DTLCHGSCHARGECLASS
                            ,DTLCHGSTYPNO)
        SELECT             PREPDPRCHGREC.ICHRECNO,
                           PREPDPRCHGREC.DTLRECNO,
                           PREPDPRCHGREC.RAWAPPAMT,
                           PREPDPRCHGREC.ICHAPPAMT,
                           PREPDPRCHGREC.EXCRECOVFROMPL,
                           PREPDPRCHGREC.CTYNO,
                           PREPDPRCHGREC.CHARGECLASS,
                           PREPDPRCHGREC.DTLCHGSTYPNO
                           FROM DUAL
                           WHERE NOT EXISTS (SELECT 1
                                             FROM DPRSTOLOTSCHGS CHECKIT
                                             WHERE CHECKIT.DTLCHGSDTLRECNO = PREPDPRCHGREC.DTLRECNO
                                             AND CHECKIT.DTLCHGSICHNO = PREPDPRCHGREC.ICHRECNO);
        COMMIT;

      END LOOP;

      FOR PREPCHGNULLISTREC IN PREPCHGNULLISTCURSOR(DPRRECNOS_IN(DPRREC))
      LOOP
        INSERT INTO DPRSTOLOTSCHGS(DTLCHGSICHNO
                      ,DTLCHGSDTLRECNO
                      ,DTLCHGSRAWAPP
                      ,DTLCHGSBASEAPP
                      ,DTLCHGSEXCLFROMPL
                      ,DTLCHGSCTYNO
                      ,DTLCHGSCHARGECLASS
                      ,DTLCHGSTYPNO)
        SELECT         PREPCHGNULLISTREC.ICHRECNO,
                       PREPCHGNULLISTREC.DTLRECNO,
                       PREPCHGNULLISTREC.RAWAPPAMTPERBULKLOT,
                       PREPCHGNULLISTREC.APPAMTPERBULKLOT,
                       PREPCHGNULLISTREC.EXCRECOVFROMPL,
                       PREPCHGNULLISTREC.CTYNO,
                       PREPCHGNULLISTREC.CHARGECLASS,
                       PREPCHGNULLISTREC.DTLCHGSTYPNO
                       FROM DUAL
                       WHERE NOT EXISTS (SELECT 1
                                         FROM DPRSTOLOTSCHGS CHECKIT
                                         WHERE CHECKIT.DTLCHGSDTLRECNO = PREPCHGNULLISTREC.DTLRECNO
                                         AND CHECKIT.DTLCHGSICHNO = PREPCHGNULLISTREC.ICHRECNO);
        COMMIT;
      END LOOP;

      FOR PREPSALESCHGNOEXPREC IN PREPSALESCHGNOEXPCUR(DPRRECNOS_IN(DPRREC))
      LOOP
        INSERT INTO DPRSTOLOTSCHGS(DTLCHGSICHNO
                                  ,DTLCHGSDTLRECNO
                                  ,DTLCHGSRAWAPP
                                  ,DTLCHGSBASEAPP
                                  ,DTLCHGSEXCLFROMPL
                                  ,DTLCHGSCTYNO
                                  ,DTLCHGSCHARGECLASS
                                  ,DTLCHGSTYPNO)
        SELECT                   PREPSALESCHGNOEXPREC.ICHRECNO,
                                 PREPSALESCHGNOEXPREC.DTLRECNO,
                                 PREPSALESCHGNOEXPREC.RAWAPPAMTPERBULKLOT,
                                 PREPSALESCHGNOEXPREC.APPAMTPERBULKLOT,
                                 PREPSALESCHGNOEXPREC.EXCRECOVFROMPL,
                                 PREPSALESCHGNOEXPREC.CTYNO,
                                 PREPSALESCHGNOEXPREC.CHARGECLASS,
                                 PREPSALESCHGNOEXPREC.DTLCHGSTYPNO                       
                                 FROM DUAL
                                 WHERE NOT EXISTS (SELECT 1
                                                   FROM DPRSTOLOTSCHGS CHECKIT
                                                   WHERE CHECKIT.DTLCHGSDTLRECNO = PREPSALESCHGNOEXPREC.DTLRECNO
                                                   AND CHECKIT.DTLCHGSICHNO = PREPSALESCHGNOEXPREC.ICHRECNO);
        COMMIT;
      END LOOP;

      FOR SALESRTECHGSREC IN SALESRTECHGS(DPRRECNOS_IN(DPRREC))
      LOOP
        INSERT INTO DPRSTOLOTSCHGS(DTLCHGSICHNO
                            ,DTLCHGSDTLRECNO
                            ,DTLCHGSRAWAPP
                            ,DTLCHGSBASEAPP
                            ,DTLCHGSEXCLFROMPL
                            ,DTLCHGSCTYNO
                            ,DTLCHGSCHARGECLASS
                            ,DTLCHGSTYPNO)
        SELECT             SALESRTECHGSREC.ICHRECNO,
                           SALESRTECHGSREC.DTLRECNO,
                           SALESRTECHGSREC.RAWAPPAMTPERBULKLOT,
                           SALESRTECHGSREC.APPAMTPERBULKLOT,
                           SALESRTECHGSREC.EXCRECOVFROMPL,
                           SALESRTECHGSREC.CTYNO,
                           SALESRTECHGSREC.CHARGECLASS,
                           SALESRTECHGSREC.DTLCHGSTYPNO
                           FROM DUAL
                           WHERE NOT EXISTS (SELECT 1
                                             FROM DPRSTOLOTSCHGS CHECKIT
                                             WHERE CHECKIT.DTLCHGSDTLRECNO = SALESRTECHGSREC.DTLRECNO
                                             AND CHECKIT.DTLCHGSICHNO = SALESRTECHGSREC.ICHRECNO);
        COMMIT;

      END LOOP;

      FOR DOSALESROUNDINGREC IN DOSALESROUNDINGCUR(DPRRECNOS_IN(DPRREC))
      LOOP

          UPDATE DPRSTOLOTSCHGS
          SET DTLCHGSBASEAPP = NVL(DTLCHGSBASEAPP,0)  +  DOSALESROUNDINGREC.ROUNDDIFF
          WHERE DTLCHGSRECNO =  DOSALESROUNDINGREC.MAXDTLCHGSRECNO;
          
          COMMIT;

      END LOOP;

      COMMIT;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      FT_PK_ERRORS.LOG_AND_STOP;
      ROLLBACK;
  END GETSALES_INT;

  PROCEDURE GETSALES(DPRRECNO_IN DELPRICE.DPRRECNO%TYPE)
  IS
    PARAMETER_LIST    FT_PK_STRING_UTILS.TYPE_STRING_TOKENS;
    DPRRECNOS_IN      RECORD_NUMBERS;
  BEGIN
    IF DPRRECNO_IN IS NULL THEN
      PARAMETER_LIST('#PARAMNAME') := 'DPRRECNOS_IN';
      PARAMETER_LIST('#PARAMVALUE') := TO_CHAR(DPRRECNO_IN);
      FT_PK_ERRORS.RAISE_ERROR(FT_PK_ERRNUMS.FT_PARAMETER, PARAMETER_LIST);
    END IF;

    DPRRECNOS_IN := RECORD_NUMBERS(DPRRECNO_IN);

    GETSALES_INT(DPRRECNOS_IN);
  EXCEPTION
    WHEN OTHERS THEN
    FT_PK_ERRORS.LOG_AND_STOP;
    ROLLBACK;
  END GETSALES;

  PROCEDURE GETLOTS(LITITENO_IN LOTITE.LITITENO%TYPE)
  IS
    PARAMETER_LIST      FT_PK_STRING_UTILS.TYPE_STRING_TOKENS;

    CURSOR GETBALSTOLOTSCHGSTODEL(LITITENO_IN INTEGER)
    IS
      SELECT BALTOLOTSCHGS.BTLCHGSRECNO
      FROM BALTOLOTSCHGS, BALTOLOTS
      WHERE BALTOLOTSCHGS.BTLRECNO = BALTOLOTS.BTLRECNO
      AND BALTOLOTS.BTLLITITENO = LITITENO_IN
      ORDER BY BALTOLOTSCHGS.BTLCHGSRECNO;

    CURSOR GETBALSTOLOTSTODEL(LITITENO_IN INTEGER)
    IS
      SELECT BALTOLOTS.BTLRECNO 
      FROM BALTOLOTS 
      WHERE BALTOLOTS.BTLLITITENO = LITITENO_IN 
      ORDER BY BALTOLOTS.BTLRECNO;

    CURSOR GETBALSTOLOTSCUR(LITITETO_IN INTEGER)
    IS
      SELECT LITITENO
      ,PORSALOFF
      ,CASE WHEN LITRCVCOMPLETE = 'Y' THEN NVL(LITQTYRCV,0) ELSE NVL(LITORGEXP,0) END RCVQTY
      FROM LOTITE, PURORD
      WHERE LITPORREC = PORRECNO
      AND  LOTITE.LITITENO = LITITENO_IN
      ORDER BY LITITENO,PORSALOFF;

    CURSOR GETTRANSFERQTYCUR(LITITENO_IN INTEGER)
    IS
      SELECT BTLRECNO, SUM(NVL(TRANSFERINQTY,0)) TRANSFERQTY
      FROM ITESTO, BALTOLOTS
      WHERE TRNCALCMETH = 0
      AND BTLLITITENO = ISTLITNO
      AND BTLSALOFFNO = TRNSALOFFNO
      AND ITESTO.ISTLITNO = LITITENO_IN
      GROUP BY BTLRECNO
      ORDER BY BTLRECNO;

      GETTRANSFERQTYREC GETTRANSFERQTYCUR%ROWTYPE;

    CURSOR GETTRANSBALSTOLOTSCUR(LITITENO_IN INTEGER)
    IS
      SELECT ISTLITNO
      ,TRNSALOFFNO
      ,SUM(NVL(TRANSFERINQTY,0)) TRANSFERQTY
      FROM ITESTO
      WHERE TRNCALCMETH = 0
      AND ITESTO.ISTLITNO = LITITENO_IN
      AND TRNSALOFFNO IS NOT NULL
      AND NOT EXISTS (SELECT 1
                      FROM BALTOLOTS CHECKIT
                      WHERE CHECKIT.BTLLITITENO = ITESTO.ISTLITNO
                      AND CHECKIT.BTLSALOFFNO = ITESTO.TRNSALOFFNO)
      GROUP BY ISTLITNO, TRNSALOFFNO
      ORDER BY ISTLITNO, TRNSALOFFNO;

    CURSOR GETSALEQTYFORBALSCUR(LITITENO_IN INTEGER)
    IS
      SELECT BTLRECNO, SUM(NVL(DPRSTOLOTS.DTLBULKSALESQTY,0)) SALESQTY
      FROM DPRSTOLOTS, BALTOLOTS
      WHERE DPRSTOLOTS.DTLLITITENO = BALTOLOTS.BTLLITITENO
      AND DPRSTOLOTS.DTLSALOFFNO = BALTOLOTS.BTLSALOFFNO
      AND BALTOLOTS.BTLLITITENO = LITITENO_IN
      GROUP BY BTLRECNO
      ORDER BY BTLRECNO;

      GETSALEQTYFORBALSREC GETSALEQTYFORBALSCUR%ROWTYPE;

    CURSOR BALSTOLOTSCHGSCUR(LITITENO_IN INTEGER)
    IS
      SELECT  BALTOLOTS.BTLRECNO,
          ITECHG.ICHRECNO,
          CHGTYP.CTYNO,
          CHGTYP.CHARGECLASS,
          NVL(EXPCHA.EXCRECOVFROMPL, 0) EXCRECOVFROMPL,
          NVL(ITECHG.ICHRAWAPPAMT, 0.0) ICHRAWAPPAMT,
          NVL(ITECHG.ICHAPPAMT, 0.0) ICHAPPAMT,
          NVL(ITECHG.ICHRAWAUTHAMM, 0.0) ICHRAWAUTHAMM,
          NVL(ITECHG.ICHAUTHAMM, 0.0) ICHAUTHAMM
      FROM ITECHG
      INNER JOIN CHGTYP
        ON CHGTYP.CTYNO = ITECHG.CTYNO
      INNER JOIN EXPCHA
        ON EXPCHA.EXCCHAREC = ITECHG.EXCRECNO
      INNER JOIN BALTOLOTS
        ON BALTOLOTS.BTLLITITENO = ITECHG.LITRECNO AND BALTOLOTS.BTLSALOFFNO = EXPCHA.EXCSALOFF
      WHERE ITECHG.LITRECNO = LITITENO_IN
      ORDER BY BALTOLOTS.BTLRECNO, ITECHG.ICHRECNO;

  BEGIN
    IF LITITENO_IN IS NULL THEN
      PARAMETER_LIST('#PARAMNAME') := 'LITITENO_IN';
      PARAMETER_LIST('#PARAMVALUE') := TO_CHAR(LITITENO_IN);
      FT_PK_ERRORS.RAISE_ERROR(FT_PK_ERRNUMS.FT_PARAMETER, PARAMETER_LIST);
    END IF;

    FOR BALTOLOTSCHGSREC IN GETBALSTOLOTSCHGSTODEL(LITITENO_IN)
    LOOP
      DELETE FROM BALTOLOTSCHGS
      WHERE BALTOLOTSCHGS.BTLCHGSRECNO = BALTOLOTSCHGSREC.BTLCHGSRECNO;
      
      COMMIT;
    END LOOP;

    FOR BALTOLOTSCHGSREC IN GETBALSTOLOTSTODEL(LITITENO_IN)
    LOOP
      DELETE FROM BALTOLOTS
      WHERE BALTOLOTS.BTLRECNO = BALTOLOTSCHGSREC.BTLRECNO;
      
      COMMIT;
    END LOOP;

    FOR GETBALSTOLOTSREC IN GETBALSTOLOTSCUR(LITITENO_IN)
    LOOP
      INSERT INTO BALTOLOTS(BTLLITITENO
                            ,BTLSALOFFNO
                            ,RCVQTY)
      SELECT                GETBALSTOLOTSREC.LITITENO
                            ,GETBALSTOLOTSREC.PORSALOFF
                            ,GETBALSTOLOTSREC.RCVQTY
                            FROM DUAL
                            WHERE NOT EXISTS (SELECT 1 
                                              FROM BALTOLOTS CHECKIT
                                              WHERE CHECKIT.BTLLITITENO = GETBALSTOLOTSREC.LITITENO
                                              AND CHECKIT.BTLSALOFFNO = GETBALSTOLOTSREC.PORSALOFF);
      COMMIT;
    END LOOP;

    OPEN GETTRANSFERQTYCUR(LITITENO_IN);
    LOOP

      FETCH GETTRANSFERQTYCUR INTO GETTRANSFERQTYREC;

      UPDATE BALTOLOTS
      SET RCVQTY = NVL(RCVQTY,0) + GETTRANSFERQTYREC.TRANSFERQTY
      WHERE BALTOLOTS.BTLRECNO = GETTRANSFERQTYREC.BTLRECNO;

      COMMIT;
      
      EXIT WHEN GETTRANSFERQTYCUR%NOTFOUND;

    END LOOP;
    CLOSE GETTRANSFERQTYCUR;

    FOR GETTRANSBALSTOLOTSREC IN GETTRANSBALSTOLOTSCUR(LITITENO_IN)
    LOOP
      INSERT INTO BALTOLOTS(BTLLITITENO
                           ,BTLSALOFFNO
                           ,RCVQTY)
      SELECT                GETTRANSBALSTOLOTSREC.ISTLITNO
                           ,GETTRANSBALSTOLOTSREC.TRNSALOFFNO
                           ,GETTRANSBALSTOLOTSREC.TRANSFERQTY
                            FROM DUAL
                            WHERE NOT EXISTS (SELECT 1 
                                              FROM BALTOLOTS CHECKIT
                                              WHERE CHECKIT.BTLLITITENO = GETTRANSBALSTOLOTSREC.ISTLITNO
                                              AND CHECKIT.BTLSALOFFNO = GETTRANSBALSTOLOTSREC.TRNSALOFFNO);
      COMMIT;

    END LOOP;

    OPEN GETSALEQTYFORBALSCUR(LITITENO_IN);
    LOOP
        FETCH GETSALEQTYFORBALSCUR INTO GETSALEQTYFORBALSREC;
        
        UPDATE BALTOLOTS
        SET ONSTOCKQTY = RCVQTY - GETSALEQTYFORBALSREC.SALESQTY
        WHERE BALTOLOTS.BTLRECNO = GETSALEQTYFORBALSREC.BTLRECNO;
        COMMIT;
        
        EXIT WHEN GETSALEQTYFORBALSCUR%NOTFOUND;
      END LOOP;
    CLOSE GETSALEQTYFORBALSCUR;

    FOR  BALSTOLOTSCHGSREC IN BALSTOLOTSCHGSCUR(LITITENO_IN)
    LOOP
    
      INSERT INTO BALTOLOTSCHGS(BTLRECNO
                              , ICHRECNO
                              , CTYNO
                              , CHARGECLASS
                              , EXCLFROMPL
                              , RAWAPP
                              , BASEAPP
                              , RAWAUTH
                              , BASEAUTH)
                        SELECT  BALSTOLOTSCHGSREC.BTLRECNO,
                                BALSTOLOTSCHGSREC.ICHRECNO,
                                BALSTOLOTSCHGSREC.CTYNO,
                                BALSTOLOTSCHGSREC.CHARGECLASS,
                                BALSTOLOTSCHGSREC.EXCRECOVFROMPL,
                                BALSTOLOTSCHGSREC.ICHRAWAPPAMT,
                                BALSTOLOTSCHGSREC.ICHAPPAMT,
                                BALSTOLOTSCHGSREC.ICHRAWAUTHAMM,
                                BALSTOLOTSCHGSREC.ICHAUTHAMM
                                FROM DUAL
                                WHERE NOT EXISTS (SELECT 1
                                                  FROM BALTOLOTSCHGS CHECKIT
                                                  WHERE CHECKIT.BTLRECNO = BALSTOLOTSCHGSREC.BTLRECNO
                                                  AND CHECKIT.ICHRECNO = BALSTOLOTSCHGSREC.ICHRECNO);
       COMMIT;

      END LOOP;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      FT_PK_ERRORS.LOG_AND_STOP();
  END GETLOTS;

  PROCEDURE GETPURCHDPRSTOLOTS(LITITENO_IN LOTITE.LITITENO%TYPE)
  IS
    CURSOR GET_ROUNDING_TODO(LITITENO_IN INTEGER)
    IS
      SELECT MAXDTLCHGSRECNO, BaseDiff, RawDiff, RCVQTY, TOTBULKSOLDQTY
      FROM (
      SELECT BTLLITITENO, ITECHG.ICHRECNO, RCVQTY, MAX(DPRSTOLOTSCHGS.DTLCHGSRECNO) MAXDTLCHGSRECNO
      , SUM(NVL(DTLBULKSALESQTY,0)) TOTBULKSOLDQTY, SUM(NVL(DTLCHGSRAWAPP,0)) TOTRAWAPP, SUM(NVL(DTLCHGSBASEAPP,0)) TOTBASEAPP
      ,ICHAPPAMT
      ,Nvl(ICHAPPAMT,0) - SUM(NVL(DTLCHGSBASEAPP,0)) BaseDiff
      ,CASE WHEN (EXCTOBASERATE = 1.00 OR EXCTOBASERATE < 0.000009) THEN NVL(ICHAPPAMT,0) ELSE  ROUND(NVL(ICHAPPAMT,0) / EXCTOBASERATE,2) END RAWAPPAMT
      ,CASE WHEN (EXCTOBASERATE = 1.00 OR EXCTOBASERATE < 0.000009) THEN NVL(ICHAPPAMT,0) ELSE  ROUND(NVL(ICHAPPAMT,0) / EXCTOBASERATE,2) END - SUM(NVL(DTLCHGSRAWAPP,0)) RawDiff
      FROM BALTOLOTS, DPRSTOLOTS, DPRSTOLOTSCHGS, ITECHG, EXPCHA
      WHERE BALTOLOTS.BTLLITITENO = DPRSTOLOTS.DTLLITITENO
      AND BALTOLOTS.BTLSALOFFNO   = DPRSTOLOTS.DTLSALOFFNO
      AND DPRSTOLOTS.DTLRECNO     = DPRSTOLOTSCHGS.DTLCHGSDTLRECNO
      AND DPRSTOLOTSCHGS.DTLCHGSICHNO = ITECHG.ICHRECNO
      AND EXPCHA.EXCCHAREC = ITECHG.EXCRECNO
      AND DPRSTOLOTS.DTLLITITENO = LITITENO_IN
      AND DTLCHGSTYPNO = 2
      GROUP BY BTLLITITENO, ITECHG.ICHRECNO, RCVQTY, ITECHG.ICHAPPAMT,EXCTOBASERATE )
      WHERE ABS(RCVQTY - TOTBULKSOLDQTY) < 0.009
      AND (ABS(NVL(BASEDIFF,0)) > 0.009 OR  ABS(NVL(RAWDIFF,0)) > 0.009)
      ORDER BY MAXDTLCHGSRECNO;

    PARAMETER_LIST      FT_PK_STRING_UTILS.TYPE_STRING_TOKENS;

    CURSOR DPRSTOLOTSPURCHGSDEL_CUR(LITITENO_IN INTEGER)
    IS
      SELECT DPRSTOLOTSCHGS.DTLCHGSRECNO
      FROM DPRSTOLOTSCHGS, DPRSTOLOTS
      WHERE DPRSTOLOTSCHGS.DTLCHGSDTLRECNO = DPRSTOLOTS.DTLRECNO
      AND DPRSTOLOTS.DTLLITITENO = LITITENO_IN
      AND DPRSTOLOTSCHGS.DTLCHGSTYPNO = 2 ---This cursor is used to delete the Purchase charges from DPRSTOLOTSCHGS for the whole lot.
      ORDER BY DTLCHGSRECNO;

    CURSOR DPRSTOLOTSPURCHG_CUR(LITITENO_IN INTEGER)
    IS
      SELECT
       ICHRECNO
      ,DTLRECNO
      ,ROUND(CASE WHEN TOTQTY > 0 THEN (RAWAPPAMT * DTLBULKSALESQTY) /  TOTQTY ELSE 0 END, 2) LOTTODPRCHGAUTHAPPRAW
      ,ROUND( CASE WHEN TOTQTY > 0 THEN (ICHAPPAMT * DTLBULKSALESQTY) /  TOTQTY ELSE 0 END, 2) LOTTODPRCHGAPPBASE
      ,EXCRECOVFROMPL
      ,CTYNO
      ,CHARGECLASS
      ,2 TYPENO
      FROM (
      SELECT ICHRECNO
      , DPRSTOLOTS.DTLRECNO
      ,DPRSTOLOTS.DTLDPRRECNO
      ,BALTOLOTS.BTLLITITENO
      ,BALTOLOTS.RCVQTY TOTQTY
      ,NVL(DTLBULKSALESQTY,0) DTLBULKSALESQTY
      ,NVL(ICHAPPAMT,0) ICHAPPAMT
      ,CASE WHEN (EXCTOBASERATE = 1.00 OR EXCTOBASERATE < 0.000009) THEN NVL(ICHAPPAMT,0) ELSE  ROUND(NVL(ICHAPPAMT,0) / EXCTOBASERATE,2) END RAWAPPAMT
      ,NVL(EXPCHA.EXCRECOVFROMPL,0) EXCRECOVFROMPL
      ,CHGTYP.CHARGECLASS
      ,CHGTYP.CTYNO
      FROM ITECHG, BALTOLOTS,DPRSTOLOTS, EXPCHA, CHGTYP
      WHERE ITECHG.LITRECNO= DPRSTOLOTS.DTLLITITENO
      AND EXCRECNO = EXPCHA.EXCCHAREC
      AND BALTOLOTS.BTLSALOFFNO = DPRSTOLOTS.DTLSALOFFNO
      AND BALTOLOTS.BTLLITITENO = ITECHG.LITRECNO
      AND EXPCHA.EXCSALOFF = DPRSTOLOTS.DTLSALOFFNO
      AND ITECHG.CTYNO = CHGTYP.CTYNO
      AND ITECHG.LITRECNO = LITITENO_IN
      AND NOT EXISTS (SELECT 1
                      FROM DPRSTOLOTSCHGS CHECKIT
                      WHERE CHECKIT.DTLCHGSDTLRECNO =  DPRSTOLOTS.DTLRECNO
                      AND CHECKIT.DTLCHGSICHNO = ITECHG.ICHRECNO))
      ORDER BY  ICHRECNO,DTLRECNO;

  CURSOR GETBALTOLOTSPURCHG_CUR(LITITENO_IN INTEGER)
  IS
      SELECT BTLCHGSRECNO
      FROM BALTOLOTSCHGS, BALTOLOTS
      WHERE BALTOLOTSCHGS.BTLRECNO = BALTOLOTS.BTLRECNO
      AND BALTOLOTS.BTLLITITENO = LITITENO_IN
      ORDER BY BTLCHGSRECNO;

  BEGIN
    IF LITITENO_IN IS NULL THEN
      PARAMETER_LIST('#PARAMNAME') := 'LITITENO_IN';
      PARAMETER_LIST('#PARAMVALUE') := TO_CHAR(LITITENO_IN);
      FT_PK_ERRORS.RAISE_ERROR(FT_PK_ERRNUMS.FT_PARAMETER, PARAMETER_LIST);
    END IF;

  FOR DPRSTOLOTSPURCHGSDELREC IN DPRSTOLOTSPURCHGSDEL_CUR(LITITENO_IN)
  LOOP
  
    DELETE FROM DPRSTOLOTSCHGS
    WHERE DPRSTOLOTSCHGS.DTLCHGSRECNO =  DPRSTOLOTSPURCHGSDELREC.DTLCHGSRECNO;
    
    COMMIT;

  END LOOP;

  FOR DPRSTOLOTSPURCHGREC IN DPRSTOLOTSPURCHG_CUR(LITITENO_IN)
  LOOP
    INSERT INTO DPRSTOLOTSCHGS(
                              DTLCHGSICHNO
                             ,DTLCHGSDTLRECNO
                             ,DTLCHGSRAWAPP
                             ,DTLCHGSBASEAPP
                             ,DTLCHGSEXCLFROMPL
                             ,DTLCHGSCTYNO
                             ,DTLCHGSCHARGECLASS
                             ,DTLCHGSTYPNO)
               SELECT        DPRSTOLOTSPURCHGREC.ICHRECNO,
                             DPRSTOLOTSPURCHGREC.DTLRECNO,
                             DPRSTOLOTSPURCHGREC.LOTTODPRCHGAUTHAPPRAW,
                             DPRSTOLOTSPURCHGREC.LOTTODPRCHGAPPBASE,
                             DPRSTOLOTSPURCHGREC.EXCRECOVFROMPL,
                             DPRSTOLOTSPURCHGREC.CTYNO,
                             DPRSTOLOTSPURCHGREC.CHARGECLASS,
                             DPRSTOLOTSPURCHGREC.TYPENO
                             FROM DUAL
                             WHERE NOT EXISTS (SELECT 1 
                                               FROM DPRSTOLOTSCHGS CHECKIT
                                               WHERE CHECKIT.DTLCHGSDTLRECNO = DPRSTOLOTSPURCHGREC.DTLRECNO	 
                                               AND CHECKIT.DTLCHGSICHNO = DPRSTOLOTSPURCHGREC.ICHRECNO);
    COMMIT;
  END LOOP;

  FOR ROUNDING_REC_TODO IN GET_ROUNDING_TODO(LITITENO_IN)
  LOOP
  
    UPDATE DPRSTOLOTSCHGS
    SET DTLCHGSRAWAPP = DTLCHGSRAWAPP + ROUNDING_REC_TODO.RawDiff
    ,DTLCHGSBASEAPP = DTLCHGSBASEAPP + ROUNDING_REC_TODO.BASEDIFF
    WHERE DPRSTOLOTSCHGS.DTLCHGSRECNO = ROUNDING_REC_TODO.MAXDTLCHGSRECNO;
    
    COMMIT;
  END LOOP;

  FOR GETBALTOLOTSPURCHGREC IN GETBALTOLOTSPURCHG_CUR(LITITENO_IN)
  LOOP
  
    UPDATE BALTOLOTSCHGS
    SET ONSTOCKRAWAPP = RAWAPP - NVL((SELECT SUM(NVL(DTLCHGSRAWAPP,0)) FROM DPRSTOLOTSCHGS WHERE BALTOLOTSCHGS.ICHRECNO = DPRSTOLOTSCHGS.DTLCHGSICHNO),0)
    , ONSTOCKBASEAPP = BASEAPP - NVL((SELECT SUM(NVL(DTLCHGSBASEAPP,0)) FROM DPRSTOLOTSCHGS WHERE BALTOLOTSCHGS.ICHRECNO = DPRSTOLOTSCHGS.DTLCHGSICHNO),0)
    WHERE BALTOLOTSCHGS.BTLCHGSRECNO =  GETBALTOLOTSPURCHGREC.BTLCHGSRECNO;
    
    COMMIT;
    
  END LOOP;

  COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      FT_PK_ERRORS.LOG_AND_STOP();

  END GETPURCHDPRSTOLOTS;

  PROCEDURE GETSALES
  IS
  BEGIN
    FOR AUTOCOSTSREC IN (SELECT AUTOCOSTS_PROCESS.DPRRECNO FROM AUTOCOSTS_PROCESS WHERE AUTOCOSTS_PROCESS.GETSALES = 1 AND AUTOCOSTS_PROCESS.DPRRECNO > 0) LOOP
      GETSALES(AUTOCOSTSREC.DPRRECNO);
    END LOOP;

    FOR AUTOCOSTSREC IN (SELECT AUTOCOSTS_PROCESS.LITITENO FROM AUTOCOSTS_PROCESS WHERE AUTOCOSTS_PROCESS.GETSALES = 1 AND AUTOCOSTS_PROCESS.LITITENO > 0) LOOP
      GETLOTS(AUTOCOSTSREC.LITITENO);
      GETPURCHDPRSTOLOTS(AUTOCOSTSREC.LITITENO);
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      FT_PK_ERRORS.LOG_AND_STOP;
  END GETSALES;

END FT_PK_GETSALES;