CREATE OR REPLACE PACKAGE BODY FT_PK_COSTING AS

  cVersionControlNo   VARCHAR2(12) := '1.0.1'; -- Current Version Number

  SYS_CHNGAFTCLOSE      BOOLEAN := TO_BOOLEAN(FT_PK_UTILS.GET_SYSPREF('DoNotChangeAccrualsWhenPOClose'));

  CURSOR PO_COST_SCHEMA_CUR(LITITENO_IN INTEGER)
  IS
  SELECT  PO_VIEW.LITITENO,  PO_VIEW.LITSTCLOC, PO_VIEW.LITORGEXP, PO_VIEW.LITQTYRCV, PO_VIEW.LITRCVPALS, PO_VIEW.DEFQCNARREC, PO_VIEW.LITPALQTY, PO_VIEW.LITRCVCOMPLETE,
          PO_VIEW.LITEXPDATE, PO_VIEW.EXPTDDATE, PO_VIEW.LITNETTWGT, PO_VIEW.WGTFLAG, PO_VIEW.DUTYWGT, PO_VIEW.LITSTANDNOOF, PO_VIEW.LITPURBYTYP, PO_VIEW.LHERECNO, PO_VIEW.PORCLOSED,
          PO_VIEW.LHESENCODE, PO_VIEW.PORRECNO, PO_VIEW.PRCWEIGHT, ACRCOSTS.ACRRECNO, ACRCOSTS.ACRCTYNO, ACRCOSTS.ACRRCVTYP, ACRCOSTS.ACRGDSSUP, ACRCOSTS.ACRINVSUP, ACRCOSTS.ACRDSPLOCRECNO,
          ACRCOSTS.ACRREF1, ACRCOSTS.ACRREF2, ACRCOSTS.ACRREF3, ACRCOSTS.ACRREF4, ACRCOSTS.ACRREF5, ACRCOSTS.ACRREF6, ACRCOSTS.ACRCHGPER, ACRCOSTS.ACRCHGFOR, ACRCOSTS.ACRACRUAMT,
          ACRCOSTS.ACRACRUCURRNO, ACRCOSTS.ACRSTCLOC, ACRCOSTS.ACRACTIVE,  ACRCOSTS.GDSSUPISINV, PO_VIEW.PORSALOFF,  ACRCOSTS.ACRSALOFFNO,
          ACRCOSTS.ACRQCNARRECNO AS ACRQCNARRECNO, PO_VIEW.LHEPAYTYP, CHGTYP.CHARGECLASS, CHGTYP.CALCONRCVQTY,  ACRCOSTS.ACRCHGAPPBY, ACRCOSTS.ACRPAYTYPENO, NULL AS DLTRECNO,
          ACRCOSTS.ACRCSARECNO, ACRCOSTS.ACRPRDCATNO, ACRCOSTS.ACRSMNNO
  FROM FT_V_PO PO_VIEW, ACRCOSTS, CHGTYP
  WHERE ACRCOSTS.ISACRREC = 1
      AND ACRCOSTS.ACRCTYNO = CHGTYP.CTYNO
      AND (PO_VIEW.PRCREF1 = ACRCOSTS.ACRREF1 OR ACRCOSTS.ACRREF1 = CONST.C_ALL)
      AND (PO_VIEW.PRCREF2 = ACRCOSTS.ACRREF2 OR ACRCOSTS.ACRREF2 = CONST.C_ALL)
      AND (PO_VIEW.PRCREF3 = ACRCOSTS.ACRREF3 OR ACRCOSTS.ACRREF3 = CONST.C_ALL)
      AND (PO_VIEW.PRCREF4 = ACRCOSTS.ACRREF4 OR ACRCOSTS.ACRREF4 = CONST.C_ALL)
      AND (PO_VIEW.PRCREF5 = ACRCOSTS.ACRREF5 OR ACRCOSTS.ACRREF5 = CONST.C_ALL)
      AND (PO_VIEW.PRCREF6 = ACRCOSTS.ACRREF6 OR ACRCOSTS.ACRREF6 = CONST.C_ALL)
      AND (PO_VIEW.LITSTCLOC = ACRCOSTS.ACRSTCLOC or ACRCOSTS.ACRSTCLOC = CONST.C_ALL)
      AND (PO_VIEW.PORSALOFF = ACRCOSTS.ACRSALOFFNO or ACRCOSTS.ACRSALOFFNO = CONST.C_ALL)
      AND (PO_VIEW.DEFQCNARREC = NVL(ACRCOSTS.ACRQCNARRECNO, CONST.C_ALL) OR NVL(ACRCOSTS.ACRQCNARRECNO, CONST.C_ALL) = CONST.C_ALL)
      AND (PO_VIEW.DESPATCHLOC = ACRCOSTS.ACRDSPLOCRECNO OR ACRCOSTS.ACRDSPLOCRECNO = CONST.C_ALL)
      AND (PO_VIEW.RCVINGTYP = ACRCOSTS.ACRRCVTYP OR ACRCOSTS.ACRRCVTYP = CONST.C_ALL)
      AND (PO_VIEW.LHEPAYTYP = NVL(ACRCOSTS.ACRPAYTYPENO, CONST.C_ALL) OR NVL(ACRCOSTS.ACRPAYTYPENO, CONST.C_ALL) = CONST.C_ALL)
      AND (PO_VIEW.LITBUYER = ACRCOSTS.ACRSMNNO OR ACRCOSTS.ACRSMNNO = CONST.C_ALL)
      AND EXISTS(   SELECT 1 FROM CSTANREC WHERE ACRCOSTS.ACRCSARECNO = CSTANREC.CSDCSARECNO AND CSTANREC.CSDCSTCODE = PO_VIEW.LHESENCODE
	  	  			UNION
                    SELECT 1 FROM DUAL WHERE PO_VIEW.LHESENCODE = ACRCOSTS.ACRGDSSUP OR ACRCOSTS.ACRGDSSUP = CONST.C_ALL)
      AND (EXISTS(  SELECT 1 FROM PRDGROUPCATREC
                    WHERE ACRCOSTS.ACRPRDCATNO = PRDGROUPCATREC.PRDCATNO
                      AND (PO_VIEW.PRCREF1 = PRDGROUPCATREC.ALLPREF1 OR PRDGROUPCATREC.ALLPREF1 = 0)
                      AND (PO_VIEW.PRCREF2 = PRDGROUPCATREC.ALLPREF2 OR PRDGROUPCATREC.ALLPREF2 = 0)
                      AND (PO_VIEW.PRCREF3 = PRDGROUPCATREC.ALLPREF3 OR PRDGROUPCATREC.ALLPREF3 = 0)
                      AND (PO_VIEW.PRCREF4 = PRDGROUPCATREC.ALLPREF4 OR PRDGROUPCATREC.ALLPREF4 = 0)
                      AND (PO_VIEW.PRCREF5 = PRDGROUPCATREC.ALLPREF5 OR PRDGROUPCATREC.ALLPREF5 = 0)
                      AND (PO_VIEW.PRCREF6 = PRDGROUPCATREC.ALLPREF6 OR PRDGROUPCATREC.ALLPREF6 = 0)
                ) OR ACRCOSTS.ACRPRDCATNO = CONST.C_ALL)
      AND ACRCOSTS.ACRACTIVE > 0
      AND ACRCOSTS.ACRCHGFOR NOT IN (CONST.C_FOR_DAILY, CONST.C_FOR_SALE, CONST.C_FOR_SALEAREA)   -- These are sale related and daily charges so not interested
      AND ACRCOSTS.ACRCHGPER <> CONST.C_APP_PERCSALE
      AND NVL(PO_VIEW.ONRESERVE, CONST.C_FALSE) = CONST.C_FALSE
      AND NVL(PO_VIEW.ISEXCEPTION, CONST.C_FALSE) = CONST.C_FALSE
      AND PO_VIEW.LITITENO = LITITENO_IN
  ORDER BY LITITENO, ACRCTYNO;

  CURSOR LOT_COSTS_CUR(LITITENO_IN LOTITE.LITITENO%TYPE) IS
    SELECT *
    FROM FT_V_PO PO_VIEW
    INNER JOIN FT_V_COSTS COST_VIEW
    ON PO_VIEW.LITITENO = COST_VIEW.LITRECNO
    WHERE PO_VIEW.LITITENO = LITITENO_IN;

  TYPE INDX_BOOL IS TABLE OF BOOLEAN INDEX BY PLS_INTEGER;
  TYPE PO_COST_SCHEMA_RECS IS TABLE OF PO_COST_SCHEMA_CUR%ROWTYPE INDEX BY PLS_INTEGER;
  TYPE LOT_COSTS_RECS IS TABLE OF LOT_COSTS_CUR%ROWTYPE INDEX BY PLS_INTEGER;

  TYPE COST_SCORE_REC IS RECORD(
    ACRREF1         INTEGER,
    ACRREF2         INTEGER,
    ACRREF3         INTEGER,
    ACRREF4         INTEGER,
    ACRREF5         INTEGER,
    ACRREF6         INTEGER,
    ACRSTCLOC       INTEGER,
    ACRDSPLOCRECNO  INTEGER,
    ACRRCVTYP       INTEGER,
    ACRGDSSUP       INTEGER,
    ACRCSARECNO     INTEGER,
    ACRSALOFFNO     INTEGER,
    ACRQCNARRECNO   INTEGER,
    DLTRECNO        INTEGER,
    ACRPRDCATNO     INTEGER,
    ACRSMNNO        INTEGER);

  COST_SCORE        COST_SCORE_REC;
  DEF_COST_SCORE    COST_SCORE_REC;

  FUNCTION CURRENTVERSION RETURN VARCHAR2
  IS
  BEGIN
     RETURN cVersionControlNo;
  END CURRENTVERSION;

  PROCEDURE INIT_DEF_COST_SCORE_REC
  IS
  BEGIN
    DEF_COST_SCORE.ACRREF1          := 1;
    DEF_COST_SCORE.ACRREF2          := 1;
    DEF_COST_SCORE.ACRREF3          := 1;
    DEF_COST_SCORE.ACRREF4          := 1;
    DEF_COST_SCORE.ACRREF5          := 1;
    DEF_COST_SCORE.ACRREF6          := 1;
    DEF_COST_SCORE.ACRSTCLOC        := 7;
    DEF_COST_SCORE.ACRDSPLOCRECNO   := 7;
    DEF_COST_SCORE.ACRRCVTYP        := 7;
    DEF_COST_SCORE.ACRGDSSUP        := 7;
    DEF_COST_SCORE.ACRCSARECNO      := 5;
    DEF_COST_SCORE.ACRSALOFFNO      := 8;
    DEF_COST_SCORE.ACRQCNARRECNO    := 1;
    DEF_COST_SCORE.DLTRECNO         := 1;
    DEF_COST_SCORE.ACRPRDCATNO      := 5;
    DEF_COST_SCORE.ACRSMNNO         := 1;
  END INIT_DEF_COST_SCORE_REC;

  PROCEDURE INIT_COST_SCORE_REC
  IS
  BEGIN
    INIT_DEF_COST_SCORE_REC;

    BEGIN
      SELECT  NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrRef1' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrRef1) AS AcrRef1,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrRef2' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrRef2) AS AcrRef2,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrRef3' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrRef3) AS AcrRef3,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrRef4' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrRef4) AS AcrRef4,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrRef5' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrRef5) AS AcrRef5,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrRef6' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrRef6) AS AcrRef6,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrStcLoc' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrStcLoc) AS AcrStcLoc,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrDspLocRecNo' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrDspLocRecNo) AS AcrDspLocRecNo,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrRcvTyp' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrRcvTyp) AS AcrRcvTyp,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrGdsSup' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrGdsSup) AS AcrGdsSup,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrCsaRecNo' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrCsaRecNo) AS AcrCsaRecNo,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrSalOffNo' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrSalOffNo) AS AcrSalOffNo,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrQCNarRecNo' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrQCNarRecNo) AS AcrQCNarRecNo,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'DltRecNo' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.DltRecNo) AS DltRecNo,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrPrdCatNo' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrPrdCatNo) AS AcrPrdCatNo,
              NVL(MAX(CASE WHEN PRIINTERNALLINKRECNO = 'AcrSmnNo' THEN PRIVALUE ELSE 0 END), DEF_COST_SCORE.AcrSmnNo) AS AcrSmnNo
      INTO COST_SCORE
      FROM COSTINGPRIORITYCRIT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        COST_SCORE := DEF_COST_SCORE;
      WHEN OTHERS THEN
        FT_PK_ERRORS.LOG_AND_STOP;
    END;
  END INIT_COST_SCORE_REC;

  FUNCTION GET_COST_SCORE(SCORE_VALUES COST_SCORE_REC) RETURN INTEGER
  IS
    L_RECSCORE    INTEGER := 0;
  BEGIN
    IF NVL(SCORE_VALUES.ACRREF1, CONST.C_ALL) <> CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRREF1;
    END IF;
    IF NVL(SCORE_VALUES.ACRREF2, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRREF2;
    END IF;
    IF NVL(SCORE_VALUES.ACRREF3, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRREF3;
    END IF;
    IF NVL(SCORE_VALUES.ACRREF4, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRREF4;
    END IF;
    IF NVL(SCORE_VALUES.ACRREF5, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRREF5;
    END IF;
    IF NVL(SCORE_VALUES.ACRREF6, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRREF6;
    END IF;
    IF NVL(SCORE_VALUES.ACRSTCLOC, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRSTCLOC;
    END IF;
    IF NVL(SCORE_VALUES.ACRDSPLOCRECNO, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRDSPLOCRECNO;
    END IF;
    IF NVL(SCORE_VALUES.ACRRCVTYP, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRRCVTYP;
    END IF;
    IF NVL(SCORE_VALUES.ACRGDSSUP, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRGDSSUP;
    END IF;
    IF NVL(SCORE_VALUES.ACRCSARECNO, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRCSARECNO;
    END IF;
    IF NVL(SCORE_VALUES.ACRSALOFFNO, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRSALOFFNO;
    END IF;
    IF NVL(SCORE_VALUES.ACRQCNARRECNO, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRQCNARRECNO;
    END IF;
    IF NVL(SCORE_VALUES.DLTRECNO, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.DLTRECNO;
    END IF;
    IF NVL(SCORE_VALUES.ACRPRDCATNO, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRPRDCATNO;
    END IF;
    IF NVL(SCORE_VALUES.ACRSMNNO, CONST.C_ALL) != CONST.C_ALL THEN
      L_RECSCORE := L_RECSCORE + COST_SCORE.ACRSMNNO;
    END IF;

    RETURN L_RECSCORE;
  END GET_COST_SCORE;

  FUNCTION GET_SCHEMA_RATE(ACRRECNO_IN ACRCOSTS.ACRRECNO%TYPE, DATE_IN DATE) RETURN ACRCOSTDLYRATE%ROWTYPE
  IS
    PARAMETER_LIST          FT_PK_STRING_UTILS.TYPE_STRING_TOKENS;
    RET_ACRCOSTDLYRATE      ACRCOSTDLYRATE%ROWTYPE;
    CURSOR ACRCOSTDLYRATE_CUR(ACRRECNO_IN ACRCOSTS.ACRRECNO%TYPE) IS
      SELECT *
      FROM ACRCOSTDLYRATE
      WHERE ACRCOSTDLYRATE.ACSMASTRECNO = ACRRECNO_IN
        AND ACRCOSTDLYRATE.ACSACTIVE = CONST.C_TRUE
      ORDER BY ACSSTARTDATE;
  BEGIN
    IF ACRRECNO_IN IS NULL THEN
      PARAMETER_LIST('#PARAMNAME') := 'ACRRECNO_IN';
      PARAMETER_LIST('#PARAMVALUE') := TO_CHAR(ACRRECNO_IN);
      FT_PK_ERRORS.RAISE_ERROR(FT_PK_ERRNUMS.FT_PARAMETER, PARAMETER_LIST);
    END IF;

    IF DATE_IN IS NULL THEN
      PARAMETER_LIST('#PARAMNAME') := 'DATE_IN';
      PARAMETER_LIST('#PARAMVALUE') := TO_CHAR(DATE_IN);
      FT_PK_ERRORS.RAISE_ERROR(FT_PK_ERRNUMS.FT_PARAMETER, PARAMETER_LIST);
    END IF;

    FOR RATEREC IN ACRCOSTDLYRATE_CUR(ACRRECNO_IN) LOOP
      IF RET_ACRCOSTDLYRATE.ACSRECNO IS NULL THEN
        IF RATEREC.ACSSTARTDATE IS NULL THEN
          RET_ACRCOSTDLYRATE := RATEREC;
        ELSIF RATEREC.ACSSTARTDATE <= DATE_IN AND RATEREC.ACSENDDATE >= DATE_IN THEN
          RET_ACRCOSTDLYRATE := RATEREC;
        ELSIF RATEREC.ACSSTARTDATE <= DATE_IN AND RATEREC.ACSENDDATE IS NULL THEN
          RET_ACRCOSTDLYRATE := RATEREC;
        END IF;
      END IF;
    END LOOP;

    RETURN RET_ACRCOSTDLYRATE;
  EXCEPTION
    WHEN OTHERS THEN
      FT_PK_ERRORS.LOG_AND_STOP;
  END GET_SCHEMA_RATE;

  FUNCTION CALC_PO_ACCRUAL(SCHEMA_REC_IN PO_COST_SCHEMA_CUR%ROWTYPE, ACRCOSTDLYRATE_OUT OUT ACRCOSTDLYRATE%ROWTYPE) RETURN FLOAT
  IS
    ACRCOSTDLYRATE_REC      ACRCOSTDLYRATE%ROWTYPE;
    RET_ACCRUAL_AMT         FLOAT;
    L_QTYTOUSE              INTEGER;
    L_PALQTYTOUSE           INTEGER;
    L_RETQTY                FLOAT;
    L_RETVALUE              FLOAT;
    L_AVG_RETPRICE          FLOAT;
    L_GOODSAMT              FLOAT;
  BEGIN
    ACRCOSTDLYRATE_REC := GET_SCHEMA_RATE(SCHEMA_REC_IN.ACRRECNO, SCHEMA_REC_IN.LITEXPDATE);

    IF ACRCOSTDLYRATE_REC.ACSRECNO IS NOT NULL THEN
      IF SCHEMA_REC_IN.LITRCVCOMPLETE = CONST.C_YES THEN
        L_QTYTOUSE := SCHEMA_REC_IN.LITQTYRCV;
        L_PALQTYTOUSE := SCHEMA_REC_IN.LITRCVPALS;
      ELSE
        L_QTYTOUSE := SCHEMA_REC_IN.LITORGEXP;
        L_PALQTYTOUSE := SCHEMA_REC_IN.LITPALQTY;
      END IF;

      CASE
      WHEN SCHEMA_REC_IN.ACRCHGFOR = CONST.C_FOR_PO THEN
        CASE
        WHEN SCHEMA_REC_IN.ACRCHGPER = CONST.C_APP_BOX AND SCHEMA_REC_IN.LHEPAYTYP = CONST.C_ACCOUNTSALE AND SCHEMA_REC_IN.CHARGECLASS = CONST.C_GOODSREBATE THEN
          IF FT_PK_SALES.GET_LOT_SOLD_QTY(SCHEMA_REC_IN.LITITENO) > 0.0 THEN
            RET_ACCRUAL_AMT := L_QTYTOUSE * ACRCOSTDLYRATE_REC.ACSRATE;
          END IF;
        WHEN SCHEMA_REC_IN.ACRCHGPER = CONST.C_APP_BOX THEN
          RET_ACCRUAL_AMT := L_QTYTOUSE * ACRCOSTDLYRATE_REC.ACSRATE;
        WHEN SCHEMA_REC_IN.ACRCHGPER = CONST.C_APP_WGT THEN
          IF ABS(SCHEMA_REC_IN.LITNETTWGT) > 0.009 THEN
            RET_ACCRUAL_AMT := SCHEMA_REC_IN.LITNETTWGT * ACRCOSTDLYRATE_REC.ACSRATE;
          ELSE
            RET_ACCRUAL_AMT := L_QTYTOUSE * SCHEMA_REC_IN.PRCWEIGHT * ACRCOSTDLYRATE_REC.ACSRATE;
          END IF;
        WHEN SCHEMA_REC_IN.ACRCHGPER = CONST.C_APP_PAL THEN
          RET_ACCRUAL_AMT := L_PALQTYTOUSE * ACRCOSTDLYRATE_REC.ACSRATE;
        WHEN SCHEMA_REC_IN.ACRCHGPER = CONST.C_APP_DUTYWGT THEN
          RET_ACCRUAL_AMT := SCHEMA_REC_IN.DUTYWGT * ACRCOSTDLYRATE_REC.ACSRATE;
        WHEN SCHEMA_REC_IN.ACRCHGPER = CONST.C_APP_CONTAINER THEN
          RET_ACCRUAL_AMT := ACRCOSTDLYRATE_REC.ACSRATE;
		ELSE
		  RET_ACCRUAL_AMT := 0.0;
        END CASE;
      WHEN SCHEMA_REC_IN.ACRCHGFOR = CONST.C_FOR_RETURN AND SCHEMA_REC_IN.LHEPAYTYP <> CONST.C_SELFINV AND SCHEMA_REC_IN.ACRCHGPER = CONST.C_APP_BOX THEN
        FT_PK_RETURNPRICES.GET_RETURN_PRICES(SCHEMA_REC_IN.LITITENO, L_RETQTY, L_RETVALUE);
        IF L_RETQTY > 0 THEN
          RET_ACCRUAL_AMT := SCHEMA_REC_IN.LITQTYRCV * ACRCOSTDLYRATE_REC.ACSRATE; -- Always use received quantity
        END IF;
      WHEN SCHEMA_REC_IN.ACRCHGPER = CONST.C_APP_PERCRETURN AND SCHEMA_REC_IN.LHEPAYTYP <> CONST.C_SELFINV THEN
        FT_PK_RETURNPRICES.GET_RETURN_PRICES(SCHEMA_REC_IN.LITITENO, L_RETQTY, L_RETVALUE);
        IF L_RETQTY > 0 THEN
          L_AVG_RETPRICE := L_RETVALUE / L_RETQTY;
          RET_ACCRUAL_AMT := (SCHEMA_REC_IN.LITQTYRCV * L_AVG_RETPRICE) * (ACRCOSTDLYRATE_REC.ACSRATE / 100.0); -- Always use received quantity
        END IF;
      WHEN SCHEMA_REC_IN.ACRCHGPER = CONST.C_APP_PERCCOST THEN
        SELECT SUM(COST_VIEW.ICHRAWAPPAMT)
        INTO L_GOODSAMT
        FROM FT_V_COSTS COST_VIEW
        WHERE COST_VIEW.CTYNO = CONST.CTYGOODS
        AND COST_VIEW.LITRECNO = SCHEMA_REC_IN.LITITENO
        AND NOT EXISTS(SELECT * FROM PURCHCLAIM WHERE PURCHCLAIM.PCLAIMICHRECNO = COST_VIEW.ICHRECNO);
        RET_ACCRUAL_AMT := L_GOODSAMT * (ACRCOSTDLYRATE_REC.ACSRATE / 100.0);
	  ELSE
	    RET_ACCRUAL_AMT := 0.0;
      END CASE;
    END IF;
    ACRCOSTDLYRATE_OUT := ACRCOSTDLYRATE_REC;
    RET_ACCRUAL_AMT := NVL(RET_ACCRUAL_AMT, 0.0);
    RETURN RET_ACCRUAL_AMT;
  EXCEPTION
    WHEN OTHERS THEN
      FT_PK_ERRORS.LOG_AND_STOP;
  END CALC_PO_ACCRUAL;

  FUNCTION CAN_CHANGE_PO_COST(COST_REC_IN LOT_COSTS_CUR%ROWTYPE) RETURN BOOLEAN
  IS
    L_CANCHNG     BOOLEAN := TRUE;
  BEGIN
    IF COST_REC_IN.ICHISANAUTO = CONST.C_FALSE THEN
      L_CANCHNG := FALSE;
    ELSIF COST_REC_IN.ICHCHNGDBYUSER = CONST.C_TRUE THEN
      L_CANCHNG := FALSE;
    ELSIF ABS(COST_REC_IN.ICHAUTHAMM) > 0.009 AND COST_REC_IN.CLAACCCSTSUP <> CONST.C_RECOVERY AND  COST_REC_IN.CHARGECLASS <> CONST.C_GOODSREBATE THEN
      L_CANCHNG := FALSE;
    ELSIF SYS_CHNGAFTCLOSE  AND COST_REC_IN.PORCLOSED = CONST.C_TRUE THEN
      L_CANCHNG := FALSE;
    ELSIF COST_REC_IN.LITPURBYTYP = CONST.PERWGT AND COST_REC_IN.WGTFLAG > 0 AND COST_REC_IN.CTYNO = CONST.CTYGOODS THEN
      L_CANCHNG := FALSE;
    END IF;
    RETURN L_CANCHNG;
  END CAN_CHANGE_PO_COST;

  PROCEDURE APPLY_EXCCHAPERRATE(EXPCHA_INOUT IN OUT EXPCHA%ROWTYPE)
  IS
    L_QTYTOUSE      INTEGER;
  BEGIN
    SELECT SUM(CASE WHEN PO_VIEW.LITRCVCOMPLETE = CONST.C_YES THEN PO_VIEW.LITQTYRCV ELSE PO_VIEW.LITORGEXP END)
    INTO L_QTYTOUSE
    FROM FT_V_PO PO_VIEW
    WHERE PO_VIEW.LHERECNO = EXPCHA_INOUT.EXCLHERECNO;

    IF L_QTYTOUSE = 0 THEN
      EXPCHA_INOUT.EXCCHAPERRATE := 0.0;
    ELSE
      EXPCHA_INOUT.EXCCHAPERRATE := EXPCHA_INOUT.EXCRAWAMM / L_QTYTOUSE;
    END IF;

    FT_PK_COST_WRITES.UPDATE_EXPCHA(EXPCHA_INOUT);
  END;


  PROCEDURE AUTO_PO_COSTS(LITRECS_IN RECORD_NUMBERS)
  IS
    TYPE SCORE_COUNT_RECS IS TABLE OF INTEGER INDEX BY PLS_INTEGER;
    SCHEMA_RESULTS      PO_COST_SCHEMA_RECS;
    SCORE_COUNT         SCORE_COUNT_RECS;
    SCORE_VALUES        COST_SCORE_REC;
    L_SCORETHIS         INTEGER;
    ITECHGS_TO_WRITE    FT_PK_COST_WRITES.ITECHG_RECS := FT_PK_COST_WRITES.ITECHG_RECS();
    EXPCHAS_TO_WRITE    FT_PK_COST_WRITES.EXPCHA_RECS := FT_PK_COST_WRITES.EXPCHA_RECS();
    LOT_COSTS           LOT_COSTS_RECS;
    L_CANCHNG           BOOLEAN;
    L_THISREC           INTEGER;
    COST_AMT            FLOAT;
    CTY_ITR             INTEGER;
    ACRCOSTDLYRATE_REC  ACRCOSTDLYRATE%ROWTYPE;
    TYPE CONTAINER_AMTS IS TABLE OF FLOAT INDEX BY PLS_INTEGER;
    CONTAINER_RECS      CONTAINER_AMTS;
    CALCONRCV_RECS      INDX_BOOL;
    L_EXCSENCODE        EXPCHA.EXCSENCODE%TYPE;
    CHNG_SUPPLIER       INDX_BOOL;
  BEGIN
    FOR LIT_ITR IN LITRECS_IN.FIRST..LITRECS_IN.LAST LOOP
      SCHEMA_RESULTS.DELETE;
      SCORE_COUNT.DELETE;
      LOT_COSTS.DELETE;
      ITECHGS_TO_WRITE.DELETE;
      EXPCHAS_TO_WRITE.DELETE;
      CONTAINER_RECS.DELETE;
      CALCONRCV_RECS.DELETE;
      CHNG_SUPPLIER.DELETE;
      FOR SCHEMA_REC IN PO_COST_SCHEMA_CUR(LITRECS_IN(LIT_ITR)) LOOP
        IF NOT SCORE_COUNT.EXISTS(SCHEMA_REC.ACRCTYNO) THEN
          SCORE_COUNT(SCHEMA_REC.ACRCTYNO) := -1;
        END IF;

        SCORE_VALUES.ACRREF1 := SCHEMA_REC.ACRREF1;
        SCORE_VALUES.ACRREF2 := SCHEMA_REC.ACRREF2;
        SCORE_VALUES.ACRREF3 := SCHEMA_REC.ACRREF3;
        SCORE_VALUES.ACRREF4 := SCHEMA_REC.ACRREF4;
        SCORE_VALUES.ACRREF5 := SCHEMA_REC.ACRREF5;
        SCORE_VALUES.ACRREF6 := SCHEMA_REC.ACRREF6;
        SCORE_VALUES.ACRSTCLOC := SCHEMA_REC.ACRSTCLOC;
        SCORE_VALUES.ACRDSPLOCRECNO := SCHEMA_REC.ACRDSPLOCRECNO;
        SCORE_VALUES.ACRRCVTYP := SCHEMA_REC.ACRRCVTYP;
        SCORE_VALUES.ACRGDSSUP := SCHEMA_REC.ACRGDSSUP;
        SCORE_VALUES.ACRCSARECNO := SCHEMA_REC.ACRCSARECNO;
        SCORE_VALUES.ACRSALOFFNO := SCHEMA_REC.ACRSALOFFNO;
        SCORE_VALUES.ACRQCNARRECNO := SCHEMA_REC.ACRQCNARRECNO;
        SCORE_VALUES.DLTRECNO := SCHEMA_REC.DLTRECNO;
        SCORE_VALUES.ACRPRDCATNO := SCHEMA_REC.ACRPRDCATNO;
        SCORE_VALUES.ACRSMNNO := SCHEMA_REC.ACRSMNNO;

        L_SCORETHIS := GET_COST_SCORE(SCORE_VALUES);

        IF L_SCORETHIS > SCORE_COUNT(SCHEMA_REC.ACRCTYNO) THEN
          SCORE_COUNT(SCHEMA_REC.ACRCTYNO) := L_SCORETHIS;
          SCHEMA_RESULTS(SCHEMA_REC.ACRCTYNO) := SCHEMA_REC;
        END IF;
      END LOOP;

      FOR COST_REC IN LOT_COSTS_CUR(LITRECS_IN(LIT_ITR)) LOOP
        LOT_COSTS(COST_REC.CTYNO) := COST_REC;
      END LOOP;

      CTY_ITR := SCHEMA_RESULTS.FIRST;
      WHILE CTY_ITR IS NOT NULL LOOP
        L_CANCHNG := TRUE;
        IF LOT_COSTS.EXISTS(CTY_ITR) THEN
          L_CANCHNG := CAN_CHANGE_PO_COST(LOT_COSTS(CTY_ITR));
        END IF;

        IF L_CANCHNG
        THEN
          ITECHGS_TO_WRITE.EXTEND(1);
          EXPCHAS_TO_WRITE.EXTEND(1);
          L_THISREC := ITECHGS_TO_WRITE.COUNT;
          COST_AMT := CALC_PO_ACCRUAL(SCHEMA_RESULTS(CTY_ITR), ACRCOSTDLYRATE_REC);

          IF SCHEMA_RESULTS(CTY_ITR).ACRCHGPER = CONST.C_APP_CONTAINER THEN
            ITECHGS_TO_WRITE(L_THISREC).ICHAPPFAC := SCHEMA_RESULTS(CTY_ITR).ACRCHGAPPBY;
            ITECHGS_TO_WRITE(L_THISREC).ICHCHGFOR := CONST.C_FOR_CONTAINER;
            ITECHGS_TO_WRITE(L_THISREC).ICHRAWAPPAMT := 0.0;

            CONTAINER_RECS(CTY_ITR) := COST_AMT;
          ELSE
            ITECHGS_TO_WRITE(L_THISREC).ICHAPPFAC := SCHEMA_RESULTS(CTY_ITR).ACRCHGPER;
            ITECHGS_TO_WRITE(L_THISREC).ICHCHGFOR := SCHEMA_RESULTS(CTY_ITR).ACRCHGFOR;
            ITECHGS_TO_WRITE(L_THISREC).ICHRAWAPPAMT := COST_AMT;
          END IF;

          IF SCHEMA_RESULTS(CTY_ITR).ACRCHGPER = CONST.C_APP_PERCRETURN THEN
            ITECHGS_TO_WRITE(L_THISREC).ICHPCNTORRATE := ACRCOSTDLYRATE_REC.ACSRATE;
          END IF;

          ITECHGS_TO_WRITE(L_THISREC).ICHSPETO := FT_PK_COST_WRITES.POCOST_FIXED;
          ITECHGS_TO_WRITE(L_THISREC).ICHACRRECNO := SCHEMA_RESULTS(CTY_ITR).ACRRECNO;
          ITECHGS_TO_WRITE(L_THISREC).ICHORGAPPAMT := COST_AMT;

          IF SCHEMA_RESULTS(CTY_ITR).ACRCTYNO = CONST.CTYGOODS OR SCHEMA_RESULTS(CTY_ITR).GDSSUPISINV = CONST.C_TRUE THEN
            L_EXCSENCODE := SCHEMA_RESULTS(CTY_ITR).LHESENCODE;
          ELSE
            L_EXCSENCODE := SCHEMA_RESULTS(CTY_ITR).ACRINVSUP;
          END IF;

          IF LOT_COSTS.EXISTS(CTY_ITR) THEN
            IF NVL(L_EXCSENCODE, 0) = NVL(LOT_COSTS(CTY_ITR).EXCSENCODE, 0) THEN
              ITECHGS_TO_WRITE(L_THISREC).ICHRECNO := LOT_COSTS(CTY_ITR).ICHRECNO;
            ELSE
              CHNG_SUPPLIER(CTY_ITR) := TRUE;
            END IF;
          END IF;

          IF ITECHGS_TO_WRITE(L_THISREC).ICHRECNO IS NULL THEN
            EXPCHAS_TO_WRITE(L_THISREC).EXCSENCODE := L_EXCSENCODE;

            IF BSDL_PKAGE_ACCOUNTS.GETEXCLRECOVFLAG(EXPCHAS_TO_WRITE(L_THISREC).EXCSENCODE) THEN
              EXPCHAS_TO_WRITE(L_THISREC).EXCRECOVFROMPL := CONST.C_TRUE;
            ELSE
              EXPCHAS_TO_WRITE(L_THISREC).EXCRECOVFROMPL := CONST.C_FALSE;
            END IF;

            ITECHGS_TO_WRITE(L_THISREC).LITRECNO := SCHEMA_RESULTS(CTY_ITR).LITITENO;
            ITECHGS_TO_WRITE(L_THISREC).CTYNO := SCHEMA_RESULTS(CTY_ITR).ACRCTYNO;
          END IF;

          IF SCHEMA_RESULTS(CTY_ITR).CALCONRCVQTY = CONST.C_TRUE THEN
            CALCONRCV_RECS(CTY_ITR) := TRUE;
          END IF;
        END IF;
        CTY_ITR := SCHEMA_RESULTS.NEXT(CTY_ITR);
      END LOOP;

      CTY_ITR := LOT_COSTS.FIRST;
      WHILE NOT CTY_ITR IS NULL LOOP
        IF NOT SCHEMA_RESULTS.EXISTS(CTY_ITR) OR CHNG_SUPPLIER.EXISTS(CTY_ITR) THEN
          L_CANCHNG := CAN_CHANGE_PO_COST(LOT_COSTS(CTY_ITR));
          IF L_CANCHNG THEN
            ITECHGS_TO_WRITE.EXTEND(1);
            EXPCHAS_TO_WRITE.EXTEND(1);
            L_THISREC := ITECHGS_TO_WRITE.COUNT;
            ITECHGS_TO_WRITE(L_THISREC).ICHRECNO := LOT_COSTS(CTY_ITR).ICHRECNO;
            ITECHGS_TO_WRITE(L_THISREC).ICHRAWAPPAMT := 0.0;
          END IF;
        END IF;
        CTY_ITR := LOT_COSTS.NEXT(CTY_ITR);
      END LOOP;

      FOR ITR IN 1..ITECHGS_TO_WRITE.COUNT LOOP
        IF ITECHGS_TO_WRITE(ITR).ICHRECNO IS NOT NULL THEN
          FT_PK_COST_WRITES.UPDATE_ITECHG(ITECHGS_TO_WRITE(ITR), EXPCHAS_TO_WRITE(ITR));
        ELSE
          FT_PK_COST_WRITES.INSERT_ITECHG(ITECHGS_TO_WRITE(ITR), EXPCHAS_TO_WRITE(ITR));
        END IF;
      END LOOP;

      FOR ITR IN 1..EXPCHAS_TO_WRITE.COUNT LOOP
        CTY_ITR := EXPCHAS_TO_WRITE(ITR).EXCCTYNO;
        IF CONTAINER_RECS.EXISTS(CTY_ITR) THEN
          FT_PK_COST_WRITES.APPORTION_PO_COST(EXPCHAS_TO_WRITE(ITR).EXCCHAREC, CONTAINER_RECS(CTY_ITR), TRUE, FALSE);
          CONTAINER_RECS.DELETE(CTY_ITR);
        END IF;

        IF CALCONRCV_RECS.EXISTS(CTY_ITR) THEN
          APPLY_EXCCHAPERRATE(EXPCHAS_TO_WRITE(ITR));
        END IF;

      END LOOP;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      FT_PK_ERRORS.LOG_AND_STOP;
  END AUTO_PO_COSTS;

  PROCEDURE AUTO_PO_COSTS(LITITENO_IN LOTITE.LITITENO%TYPE)
  IS
    PARAMETER_LIST      FT_PK_STRING_UTILS.TYPE_STRING_TOKENS;
    LITRECS             RECORD_NUMBERS;
  BEGIN
    IF LITITENO_IN IS NULL THEN
      PARAMETER_LIST('#PARAMNAME') := 'LITITENO_IN';
      PARAMETER_LIST('#PARAMVALUE') := TO_CHAR(LITITENO_IN);
      FT_PK_ERRORS.RAISE_ERROR(FT_PK_ERRNUMS.FT_PARAMETER, PARAMETER_LIST);
    END IF;
    LITRECS := RECORD_NUMBERS(LITITENO_IN);
    AUTO_PO_COSTS(LITRECS);
  EXCEPTION
    WHEN OTHERS THEN
      FT_PK_ERRORS.LOG_AND_STOP;
  END AUTO_PO_COSTS;

-- Initialisation routine
BEGIN
  INIT_COST_SCORE_REC;
END FT_PK_COSTING;
/
