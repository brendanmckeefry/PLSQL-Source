CREATE OR REPLACE PACKAGE BODY FT_PK_PROFITISELOTS AS

  cVersionControlNo   VARCHAR2(12) := '1.0.4'; -- Current Version Number

  FUNCTION CURRENTVERSION(IN_BODYORSPEC IN INTEGER ) RETURN VARCHAR2
  IS
  BEGIN
    IF  IN_BODYORSPEC = CONST.C_SPEC THEN
      RETURN cSpecVersionControlNo;
    ELSE  
      RETURN cVersionControlNo;
    END IF;                
  END CURRENTVERSION;

  PROCEDURE LOTPROFITABILITY(LITITENO_IN LOTITE.LITITENO%TYPE)
  IS
    PARAMETER_LIST      FT_PK_STRING_UTILS.TYPE_STRING_TOKENS;
    
    CURSOR PROFIT_PERC_CUR(LITITENO_IN LOTITE.LITITENO%TYPE) 
    IS
    SELECT  LOTPROFITSALOFF.LPSRECNO,
            (SELECT  CASE
                      WHEN ABS(SUM(NVL(SUBLOTPROFITSALOFF.NETTSALES, 0.0))) < 0.01 THEN 0.0
                      ELSE ROUND(SUM(SUBLOTPROFITSALOFF.PROFIT) / ABS(SUM(NVL(SUBLOTPROFITSALOFF.NETTSALES, 0.0))) * 100.0, 2)
                    END
            FROM LOTITE, LOTPROFITSALOFF SUBLOTPROFITSALOFF
            WHERE SUBLOTPROFITSALOFF.LHERECNO = LOTPROFITSALOFF.LHERECNO
              AND NVL(LOTITE.ONRESERVE, 0) = 0
              AND LOTITE.LITITENO = SUBLOTPROFITSALOFF.LITITENO(+)) AS PROFITPERC
    FROM LOTPROFITSALOFF
    WHERE LOTPROFITSALOFF.LHERECNO = (SELECT MIN(SUBLOTPROFITSALOFF.LHERECNO) FROM LOTPROFITSALOFF SUBLOTPROFITSALOFF WHERE SUBLOTPROFITSALOFF.LITITENO = LITITENO_IN)
    ORDER BY LOTPROFITSALOFF.LPSRECNO;
  BEGIN
    IF LITITENO_IN IS NULL THEN
      PARAMETER_LIST('#PARAMNAME') := 'LITITENO_IN';
      PARAMETER_LIST('#PARAMVALUE') := TO_CHAR(LITITENO_IN);
      FT_PK_ERRORS.RAISE_ERROR(FT_PK_ERRNUMS.FT_PARAMETER, PARAMETER_LIST);
    END IF;
  
    UPDATE LOTPROFITSALOFF
    SET GROSSSALES = 0.0,
        NETTSALES = 0.0,
        PROFIT = 0.0,
        PROFITPERC = 0.0,
        PREVPROFIT = PROFIT,
        SOLDQTYEQUIV = 0,
        LHEPROFITPERC = 0.0,
        POCOSTS = NVL((	SELECT SUM(COST_VIEW.ICHAPPAMT)
                         FROM FT_V_COSTS COST_VIEW
                         WHERE COST_VIEW.EXCRECOVFROMPL = 0
                           AND COST_VIEW.ICHISTRECNO IS NULL
                           AND COST_VIEW.CTYNO <> 1
                           AND COST_VIEW.LITRECNO = LOTPROFITSALOFF.LITITENO), 0.0),
        GOODSCOST = NVL(( SELECT SUM(COST_VIEW.ICHAPPAMT)
                           FROM FT_V_COSTS COST_VIEW
                           WHERE COST_VIEW.EXCRECOVFROMPL = 0
                             AND COST_VIEW.ICHISTRECNO IS NULL
                             AND COST_VIEW.CTYNO = 1
                             AND COST_VIEW.LITRECNO = LOTPROFITSALOFF.LITITENO), 0.0)
    WHERE LOTPROFITSALOFF.LITITENO = LITITENO_IN;

    MERGE INTO LOTPROFITSALOFF LOTPROFITSALOFF
    USING (
      SELECT  SALES_VIEW.LITITENO,
              ITESTO.ISTRECNO,
              ITESTO.ISTLOTNO AS LHERECNO,
              PURORD.PORSALOFF,
              NVL(SALES_VIEW.SALES_VALUE, 0.0) AS GROSSSALES,
              NVL(SALES_VIEW.SALES_VALUE, 0.0) - NVL(SALES_VIEW.SALES_COST, 0.0) AS NETTSALES,
              NVL((SELECT SUM(COST_VIEW.ICHAPPAMT)
                   FROM FT_V_COSTS COST_VIEW
                   WHERE COST_VIEW.EXCRECOVFROMPL = 0
                     AND COST_VIEW.ICHISTRECNO IS NULL
                     AND COST_VIEW.LITRECNO = SALES_VIEW.LITITENO), 0.0) AS POCOSTS,
              NVL(( SELECT SUM(COST_VIEW.ICHAPPAMT)
                    FROM FT_V_COSTS COST_VIEW
                    WHERE COST_VIEW.EXCRECOVFROMPL = 0
                      AND COST_VIEW.CTYNO = 1
                      AND COST_VIEW.ICHISTRECNO IS NULL
                      AND COST_VIEW.LITRECNO = SALES_VIEW.LITITENO), 0.0) AS GOODSCOST,
              NVL(SALES_VIEW.BULK_SALES_QTY, 0.0) AS SOLDQTYEQUIV
    FROM FT_V_PROFITPERLOT SALES_VIEW
    INNER JOIN ITESTO
      ON ITESTO.ISTLITNO = SALES_VIEW.LITITENO AND ITESTO.ISTFSTREC = 'Y'
    INNER JOIN PURORD
      ON PURORD.PORNO = ITESTO.ISTPONO
    WHERE SALES_VIEW.LITITENO = LITITENO_IN
    ) SALESTAB
    ON (SALESTAB.ISTRECNO = LOTPROFITSALOFF.ISTRECNO)
    WHEN MATCHED THEN
    UPDATE
    SET LOTPROFITSALOFF.LHERECNO = SALESTAB.LHERECNO,
        LOTPROFITSALOFF.GROSSSALES = SALESTAB.GROSSSALES,
        LOTPROFITSALOFF.NETTSALES = SALESTAB.NETTSALES,
        LOTPROFITSALOFF.POCOSTS = SALESTAB.POCOSTS - SALESTAB.GOODSCOST,
        LOTPROFITSALOFF.GOODSCOST = SALESTAB.GOODSCOST,
        LOTPROFITSALOFF.PROFIT = SALESTAB.NETTSALES - SALESTAB.POCOSTS,
        LOTPROFITSALOFF.PROFITPERC = CASE WHEN ABS(SALESTAB.NETTSALES) < 0.01 THEN 0.0 ELSE ROUND((SALESTAB.NETTSALES - SALESTAB.POCOSTS) / ABS(SALESTAB.NETTSALES) * 100.0, 2) END,
        LOTPROFITSALOFF.SOLDQTYEQUIV = SALESTAB.SOLDQTYEQUIV
    WHEN NOT MATCHED THEN
    INSERT( LOTPROFITSALOFF.LPSRECNO,
            LOTPROFITSALOFF.LITITENO,
            LOTPROFITSALOFF.ISTRECNO,
            LOTPROFITSALOFF.LHERECNO,
            LOTPROFITSALOFF.SALOFFNO,
            LOTPROFITSALOFF.GROSSSALES,
            LOTPROFITSALOFF.NETTSALES,
            LOTPROFITSALOFF.POCOSTS,
            LOTPROFITSALOFF.GOODSCOST,
            LOTPROFITSALOFF.PROFIT,
            LOTPROFITSALOFF.PROFITPERC,
            LOTPROFITSALOFF.SOLDQTYEQUIV,
            LOTPROFITSALOFF.PROFITISED)
      VALUES  (SP_WIZGETCONTROL('NXTLPSRECNO' , 1, 'FT_PK_PROFITISELOTS'),
              SALESTAB.LITITENO,
              SALESTAB.ISTRECNO,
              SALESTAB.LHERECNO,
              SALESTAB.PORSALOFF,
              SALESTAB.GROSSSALES,
              SALESTAB.NETTSALES,
              SALESTAB.POCOSTS - SALESTAB.GOODSCOST,
              SALESTAB.GOODSCOST,
              SALESTAB.NETTSALES - SALESTAB.POCOSTS,
              CASE WHEN ABS(SALESTAB.NETTSALES) < 0.01 THEN 0.0 ELSE ROUND((SALESTAB.NETTSALES - SALESTAB.POCOSTS) / ABS(SALESTAB.NETTSALES) * 100.0, 2) END,
              SALESTAB.SOLDQTYEQUIV,
              0);
              
    UPDATE LOTPROFITSALOFF
    SET FULLYSOLDINVOICED = NVL((SELECT MIN(CASE WHEN ABS(NVL(LOTITERCVD.RCVDQTY,0) - NVL(LOTITESOLD.SOLDQTY,0)) < 0.01 THEN 1 ELSE 0 END)
                                 FROM  (SELECT ITESTO.ISTLITNO AS LITITENO, SUM(ITESTO.ISTORGQTY) AS RCVDQTY FROM ITESTO GROUP BY ITESTO.ISTLITNO) LOTITERCVD,
                                       (SELECT SALES_VIEW.LITITENO, SUM(SALES_VIEW.DTLBULKSALESQTY) SOLDQTY FROM FT_V_DPRSTOLOTS SALES_VIEW WHERE DELSTATUS = 'Inv' GROUP BY SALES_VIEW.LITITENO) LOTITESOLD
                                 WHERE LOTITERCVD.LITITENO = LOTITESOLD.LITITENO(+)
                                   AND LOTITERCVD.LITITENO = LOTPROFITSALOFF.LITITENO), 0)
    WHERE LOTPROFITSALOFF.LITITENO = LITITENO_IN;
    

    UPDATE LOTPROFITSALOFF
    SET HASGOODSCOST = NVL(( SELECT CASE WHEN ABS(SUM(COST_VIEW.ICHAPPAMT)) > 0.009 THEN 1 ELSE 0 END
    							            FROM FT_V_COSTS COST_VIEW
                             WHERE COST_VIEW.LITRECNO = LOTPROFITSALOFF.LITITENO
                               AND COST_VIEW.CTYNO = 1
                               AND COST_VIEW.ICHISTRECNO IS NULL), 0)
    WHERE LOTPROFITSALOFF.LITITENO = LITITENO_IN;

-- BMK ADDED TO ENABLE THE CAN PROFITISE FLAG BE SET FOR 0 QTY LOTS
    UPDATE LOTPROFITSALOFF
    SET HASGOODSCOST = 1
    WHERE LOTPROFITSALOFF.LITITENO = LITITENO_IN
    AND HASGOODSCOST =	0
    AND EXISTS (SELECT 1 FROM 
		(SELECT ITESTO.ISTLITNO AS LITITENO, SUM(ITESTO.ISTORGQTY) AS RCVDQTY FROM ITESTO GROUP BY ITESTO.ISTLITNO) LOTITERCVD
		WHERE LOTITERCVD.LITITENO  = LOTPROFITSALOFF.LITITENO 
		AND LOTITERCVD.RCVDQTY = 0 );

    UPDATE LOTPROFITSALOFF
    SET POCOSTAUTH =	NVL(( SELECT MIN(CASE
                                        WHEN SALOFFNO.LOTPROFITMETH IN(1, 2) AND ABS(NVL(COST_VIEW.ICHAPPAMT, 0.0) - NVL(COST_VIEW.ICHAUTHTOGLAMTBASE, 0.0)) > 0.009 THEN 0
                                        WHEN SALOFFNO.LOTPROFITMETH IN(3, 4) AND ABS(NVL(COST_VIEW.ICHAUTHTOGLAMTBASE, 0.0)) < 0.01 THEN 0
                                        ELSE 1
                                      END)
                            FROM FT_V_COSTS COST_VIEW, SALOFFNO SALOFFNO
                            WHERE SALOFFNO.SALOFFNO = LOTPROFITSALOFF.SALOFFNO
                              AND COST_VIEW.LITRECNO = LOTPROFITSALOFF.LITITENO
                              AND COST_VIEW.LITRECNO > 0
                              AND COST_VIEW.EXCRECOVFROMPL = 0
                              AND COST_VIEW.CTYNO = CASE WHEN SALOFFNO.LOTPROFITMETH IN(2, 4) THEN 1 ELSE COST_VIEW.CTYNO END
                              AND COST_VIEW.ICHISTRECNO IS NULL
                            GROUP BY SALOFFNO.LOTPROFITMETH), 1)
    WHERE LOTPROFITSALOFF.LITITENO = LITITENO_IN;
    
    UPDATE LOTPROFITSALOFF
    SET SALESCOSTAUTH = NVL(( SELECT MIN(CASE
                                            WHEN SALOFFNO.LOTPROFITMETH IN(1, 2) AND ABS(NVL(COST_VIEW.ICHAPPAMT, 0.0) - NVL(COST_VIEW.ICHAUTHTOGLAMTBASE, 0.0)) > 0.009 THEN 0
                                            WHEN SALOFFNO.LOTPROFITMETH IN(3, 4) AND ABS(NVL(COST_VIEW.ICHAUTHTOGLAMTBASE, 0.0)) < 0.01 THEN 0
                                            ELSE 1
                                         END)
                              FROM FT_V_COSTS COST_VIEW, SALOFFNO, DPRSTOLOTS
                              WHERE LOTPROFITSALOFF.SALOFFNO = SALOFFNO.SALOFFNO
                                AND LOTPROFITSALOFF.LITITENO = DPRSTOLOTS.DTLLITITENO
                                AND COST_VIEW.DPRRECNO = DPRSTOLOTS.DTLDPRRECNO
                                AND COST_VIEW.DPRRECNO > 0
                                AND COST_VIEW.EXCRECOVFROMPL = 0
                              GROUP BY SALOFFNO.LOTPROFITMETH), 1)
    WHERE LOTPROFITSALOFF.LITITENO = LITITENO_IN;
    
    UPDATE LOTPROFITSALOFF
    SET SALESCOSTAUTH = NVL(( SELECT MIN(CASE
                                          WHEN SALOFFNO.LOTPROFITMETH IN(1, 2) AND ABS(NVL(COST_VIEW.ICHAPPAMT, 0.0) - NVL(COST_VIEW.ICHAUTHTOGLAMTBASE, 0.0)) > 0.009 THEN 0
                                          WHEN SALOFFNO.LOTPROFITMETH IN(3, 4) AND NVL(COST_VIEW.ICHAUTHTOGLAMTBASE, 0.0) < 0.01 THEN 0
                                          ELSE 1
                                        END)
                              FROM FT_V_COSTS COST_VIEW, SALOFFNO SALOFFNO, DPRSTOLOTS
                              WHERE LOTPROFITSALOFF.SALOFFNO = SALOFFNO.SALOFFNO
                                AND LOTPROFITSALOFF.LITITENO = DPRSTOLOTS.DTLLITITENO
                                AND COST_VIEW.DELRECNO = DPRSTOLOTS.DTLDELRECNO
                                AND COST_VIEW.DELRECNO > 0
                                AND COST_VIEW.EXCRECOVFROMPL = 0
                              GROUP BY SALOFFNO.LOTPROFITMETH), 1)
    WHERE LOTPROFITSALOFF.LITITENO = LITITENO_IN
      AND SALESCOSTAUTH = 1;
    

    UPDATE LOTPROFITSALOFF
    SET OVERSOLD = NVL((SELECT MAX(CASE WHEN LOTITE_LINK.ORGLITITENO > 0 THEN 1 ELSE 0 END)
                        FROM LOTITE_LINK LOTITE_LINK
                        WHERE LOTITE_LINK.ORGLITITENO = LOTPROFITSALOFF.LITITENO
                          AND LOTITE_LINK.TYPEFLAG = 1
                          AND LOTITE_LINK.STATUS = 1), 0)
    WHERE LOTPROFITSALOFF.LITITENO = LITITENO_IN;

    UPDATE LOTPROFITSALOFF
    SET REOPENED = 1
    WHERE LOTPROFITSALOFF.LITITENO = LITITENO_IN
      AND PROFITISED = 1
      AND REOPENED = 0
      AND CASE
            WHEN ABS(PROFIT - PREVPROFIT) > 0.009 THEN 1
            WHEN FULLYSOLDINVOICED = 0 THEN 1
            WHEN HASGOODSCOST = 0 THEN 1
            WHEN POCOSTAUTH = 0 THEN 1
            WHEN SALESCOSTAUTH = 0 THEN 1
            ELSE 0
          END = 1;

    UPDATE LOTPROFIT
    SET REOPENED = 1
    WHERE LOTPROFIT.LITITENO = LITITENO_IN
      AND EXISTS(SELECT * FROM LOTPROFITSALOFF WHERE LOTPROFITSALOFF.LITITENO = LOTPROFIT.LITITENO AND LOTPROFITSALOFF.REOPENED = 1);

    UPDATE LOTITE
    SET ISEXCEPTION = 0
    WHERE LOTITE.LITITENO = LITITENO_IN
     AND EXISTS(SELECT * FROM LOTPROFITSALOFF WHERE LOTITE.LITITENO = LOTPROFITSALOFF.LITITENO AND LOTPROFITSALOFF.REOPENED = 1)
     AND ISEXCEPTION = 1;

    UPDATE LOTPROFITSALOFF
    SET CANPROFITISE =  CASE
                          WHEN PROFITISED = 1 AND REOPENED = 0 THEN 0
                          WHEN FULLYSOLDINVOICED = 0 THEN 0
                          WHEN HASGOODSCOST = 0 THEN 0
                          WHEN POCOSTAUTH = 0 THEN 0
                          WHEN SALESCOSTAUTH = 0 THEN 0
                          WHEN OVERSOLD = 1 THEN 0
                          ELSE 1
                        END
    WHERE LOTPROFITSALOFF.LITITENO = LITITENO_IN;
  
    COMMIT;
    
    FOR LOTPROFIT_ITR IN PROFIT_PERC_CUR(LITITENO_IN) LOOP
      UPDATE LOTPROFITSALOFF
      SET LHEPROFITPERC = LOTPROFIT_ITR.PROFITPERC
      WHERE LOTPROFITSALOFF.LPSRECNO = LOTPROFIT_ITR.LPSRECNO;
    END LOOP; 
    
    UPDATE LOTPROFITSALOFF
    SET ISOPENLOT = CASE WHEN REOPENED = 1 OR PROFITISED = 0 THEN 1 ELSE 0 END
    WHERE NOT EXISTS(SELECT * FROM LOTITE WHERE LOTITE.LITITENO = LOTPROFITSALOFF.LITITENO AND ONRESERVE = 1) 
      AND LOTPROFITSALOFF.LITITENO = LITITENO_IN;
       
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      FT_PK_ERRORS.LOG_AND_STOP;
  END LOTPROFITABILITY;

  PROCEDURE LOTPROFITABILITY
  IS
  BEGIN
    FOR AUTOCOSTSREC IN (SELECT AUTOCOSTS_PROCESS.LITITENO FROM AUTOCOSTS_PROCESS WHERE AUTOCOSTS_PROCESS.LOTPROFITABILITY = 1 AND AUTOCOSTS_PROCESS.LITITENO > 0) LOOP
      LOTPROFITABILITY(AUTOCOSTSREC.LITITENO);
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      FT_PK_ERRORS.LOG_AND_STOP;
  END LOTPROFITABILITY;

END FT_PK_PROFITISELOTS ;
/
