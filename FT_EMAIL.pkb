--
-- FT_EMAIL  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY FT_EMAIL AS
  
  MSGINTRO    CONSTANT VARCHAR2(2000) := 'This is a message from the Freshtrade Email Service' || CONST.CR || 'The following items have been flagged for your attention:' || CONST.CR || CONST.CR;
  MSGREGARDS  CONSTANT VARCHAR2(2000) := CONST.CR || CONST.CR || 'Best Regards,' || CONST.CR || 'The Freshtrade Email Service';

  PROCEDURE PROCESS_EMAILS
  IS
    SQL_STMT            VARCHAR2(2000);
    EMAIL_MSG           CLOB;
    L_NXTEMAILBATCHNO   INTEGER;
    L_EMAILSUBJECT      EMAILTYPES.EMAILSUBJECT%TYPE;
    CURSOR MSG_TYPES IS SELECT * FROM EMAILTYPES;
    CURSOR MSG_CONTACTS(EMAILTYPE_IN IN INTEGER) IS 
      SELECT NVL(EMAILCONTACTS.EMAILADDRESS, LOGONS.EMAILADDRESS) AS EMAILADDRESS
      FROM EMAILCONTACTS 
      LEFT OUTER JOIN LOGONS
        ON EMAILCONTACTS.LOGONNO = LOGONS.LOGONNO
      WHERE EMAILCONTACTS.EMAILTYPERECNO = EMAILTYPE_IN;
  BEGIN
    FOR MSG_TYPE_REC IN MSG_TYPES LOOP
      BEGIN
        IF MSG_TYPE_REC.EMAILMSGPROC IS NOT NULL THEN
          SQL_STMT := 'SELECT ' || MSG_TYPE_REC.EMAILMSGPROC || ' FROM DUAL';
          EXECUTE IMMEDIATE SQL_STMT INTO EMAIL_MSG;
        END IF;
        
        IF EMAIL_MSG IS NOT NULL THEN
          L_NXTEMAILBATCHNO := FT_EMAIL_BATCH_SEQ.NEXTVAL;
          L_EMAILSUBJECT := MSG_TYPE_REC.EMAILSUBJECT || '<' || TO_CHAR(L_NXTEMAILBATCHNO) || '>'; 
          FOR MSG_CONTACT_REC IN MSG_CONTACTS(MSG_TYPE_REC.EMAILTYPERECNO) LOOP   
            BSDL_EMAIL(MSG_TYPE_REC.EMAILFROM, --Sender Address
                       MSG_CONTACT_REC.EMAILADDRESS, -- Recipient Address
                       NULL, -- CC Address
                       NULL, -- BCC Address
                       L_EMAILSUBJECT, -- Subject
                       EMAIL_MSG, -- Message Body
                       NULL); -- Attachment
          END LOOP;
          
          IF MSG_TYPE_REC.EMAILFLAGPROC IS NOT NULL THEN
            SQL_STMT := 'CALL ' || MSG_TYPE_REC.EMAILFLAGPROC; --'CALL FT_EMAIL.FT_ERROR_LOG_FLAG(:EMAILBATCH)'
            EXECUTE IMMEDIATE SQL_STMT USING L_NXTEMAILBATCHNO;
          END IF;           
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          FT_ERRORS.LOG_AND_CONTINUE;
      END;
    END LOOP;
  END PROCESS_EMAILS;

  FUNCTION FT_ERROR_LOG_MSG RETURN CLOB
  IS
    MSGHEADER     CONSTANT VARCHAR2(2000) := 'The following new items have been written to the error log...' || CONST.CR;
    EMAIL_CONTENT CLOB;
    EMAIL_MSG     CLOB;
    CURSOR NEW_ERRORS IS SELECT ORAERRMSG FROM FT_ERROR_LOG WHERE EMAILBATCHNO = 0;
  BEGIN
    FOR ERR_REC IN NEW_ERRORS LOOP
      IF EMAIL_CONTENT IS NOT NULL THEN
        EMAIL_CONTENT := EMAIL_CONTENT || CONST.CR;
      END IF;
      EMAIL_CONTENT := EMAIL_CONTENT  || ERR_REC.ORAERRMSG;
    END LOOP;
    
    IF EMAIL_CONTENT IS NOT NULL THEN
      EMAIL_MSG := MSGINTRO || MSGHEADER || EMAIL_CONTENT || MSGREGARDS;
    END IF;
    
    RETURN EMAIL_MSG;
    
  EXCEPTION
    WHEN OTHERS THEN
      IF EMAIL_CONTENT IS NOT NULL THEN
        DBMS_LOB.FREETEMPORARY(EMAIL_CONTENT);
      END IF;
      IF EMAIL_MSG IS NOT NULL THEN
        DBMS_LOB.FREETEMPORARY(EMAIL_MSG);
      END IF;
      FT_ERRORS.LOG_AND_CONTINUE;
  END FT_ERROR_LOG_MSG;
  
  PROCEDURE FT_ERROR_LOG_FLAG(EMAILBATCHNO_IN INTEGER)
  IS
    PARAMETER_LIST    FT_STRING_UTILS.TYPE_STRING_TOKENS;
  BEGIN
    IF EMAILBATCHNO_IN < 1 THEN
      PARAMETER_LIST('#PARAMNAME') := 'EMAILBATCHNO_IN';
      PARAMETER_LIST('#PARAMVALUE') := TO_CHAR(EMAILBATCHNO_IN);
      FT_ERRORS.RAISE_ERROR(FT_ERRNUMS.FT_PARAMETER, PARAMETER_LIST);
    END IF;
    
    UPDATE FT_ERROR_LOG
    SET EMAILBATCHNO = EMAILBATCHNO_IN
    WHERE EMAILBATCHNO = 0;
  END FT_ERROR_LOG_FLAG;

END FT_EMAIL;
/
