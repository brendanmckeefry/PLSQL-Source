create or replace PACKAGE FT_PK_HH

AS
  cSpecVersionControlNo   VARCHAR2(12) := '1.0.5'; -- Current Version Number For Spec
  
  -- Added VAT to Products and Delivery date to Allocate TV 22Nov16
  
    
  -- Have to call the VAT routine using a UK normal customer.  In this case we are using FESA
  -- Will need to change for IE database
  C_DEFAULTVATCUSTOMER INTEGER := 5305;
  
   
  C_GENERICREFLAGACTION   VARCHAR2(1)  := 'C';    -- THIS IS USED IN THE REFLAG_ALL PROCEDURE TO DECIDE WHAT TO DO - CAN BE USED TO ALLOW ALL THE ITEMS TO BE INSERTED OR ALL DELETED
     
     -- MASTER flag -- determines if the triggers are in use
  C_USES_HANDHELD    BOOLEAN := TO_BOOLEAN(FT_PK_UTILS.GET_SYSPREF('LUSESHANDHELD'));
  C_USES_BI          BOOLEAN := TO_BOOLEAN(FT_PK_UTILS.GET_SYSPREF('LUSESBI'));
 
  	 -- TABLE  Constants
  C_PRDREC           CONSTANT NUMBER(5)  := 1;  -- Key PRCPRDNO
  C_PRDALLDESCS      CONSTANT NUMBER(5)  := 2;  -- Key ALLPREFNO
  C_LOGONS           CONSTANT NUMBER(5)  := 3;  -- Key LogonNo
  C_LOGTOSALOFF      CONSTANT NUMBER(5)  := 4;  -- Key LOGONNO,SALOFFNO
  C_SALOFFNO         CONSTANT NUMBER(5)  := 5;  -- Key SALOFFNO
  C_DEPARTMENTS      CONSTANT NUMBER(5)  := 6;  -- Key DPTRECNO
  C_DPTTOSALOFFNO    CONSTANT NUMBER(5)  := 7;  -- Key SALOFFNO,DPTRECNO
  C_SMN              CONSTANT NUMBER(5)  := 8;  -- Key SMNNO
  C_SMNTOLOGON       CONSTANT NUMBER(5)  := 9;  -- Key LOGONNO, SMNNO
  C_DEPARTMENTSTOSMN CONSTANT NUMBER(5)  := 10; -- Key DPTRECNO,SMNNO
  C_SOFTOSTCLOC      CONSTANT NUMBER(5)  := 11; -- Key SALOFFNO,STCLOC
  C_PRDRECTOSO       CONSTANT NUMBER(5)  := 12; -- Key SALOFFNO,PRCPRDNO
  C_VATRATES         CONSTANT NUMBER(5)  := 13; -- Key VATRECNO
  C_ACCCLASS         CONSTANT NUMBER(5)  := 14; -- Key CLARECNO
  C_ACCTOSALOFF      CONSTANT NUMBER(5)  := 15; -- Key ACSCLARECNO,ACSSALOFFNO
  C_ACCCAT           CONSTANT NUMBER(5)  := 16; -- Key CATCLARECNO, CLACLASS
  C_DLVTYPE          CONSTANT NUMBER(5)  := 17; -- Key DLTRECNO
  C_LOOKUPS          CONSTANT NUMBER(5)  := 18; -- Key not used, we just copy the 5 records across on the rare time the table changes
  C_ALLOCATE         CONSTANT NUMBER(5)  := 19; -- Key ALLOCNO
  C_PURORD           CONSTANT NUMBER(5)  := 20; -- Key PORRECNO
  C_LOTHED           CONSTANT NUMBER(5)  := 21; -- Key LHERECNO
  C_LOTITE           CONSTANT NUMBER(5)  := 22; -- Key LITITENO
  C_ORDERS           CONSTANT NUMBER(5)  := 23; -- Key ORDRECNO
  C_DELHED           CONSTANT NUMBER(5)  := 24; -- Key DLVORDNO
  C_DELDET           CONSTANT NUMBER(5)  := 25; -- Key DELRECNO
  C_DELPRICE         CONSTANT NUMBER(5)  := 26; -- Key DPRRECNO
  C_DELTOALL         CONSTANT NUMBER(5)  := 27; -- Key DALWIZUNIQUEID
  C_TKTBK            CONSTANT NUMBER(5)  := 28; -- Key TBKRECNO
  C_TKTNT            CONSTANT NUMBER(5)  := 29; -- Key TNTRECNO,TNTNO
  C_POBK             CONSTANT NUMBER(5)  := 30; -- Key PORECNO (table does not exist yet)
  C_PONT             CONSTANT NUMBER(5)  := 31; -- Key PORRECNO (table does not exist yet)
  C_SIGNATURE        CONSTANT NUMBER(5)  := 32; -- Key SIG_SEQNO (table may not exist yet)
  C_HH_PAYMENTS      CONSTANT NUMBER(5)  := 33; -- Key PAYMENT_SEQNO (table may not exist yet)
  C_HH_GUID          CONSTANT NUMBER(5)  := 34; -- Key HH_GUID (table in FT schema)
    
  C_ACCCURRDESC      CONSTANT NUMBER(5)  := 35; -- Used in BI 
  C_CHGTYP           CONSTANT NUMBER(5)  := 36; -- Used in BI 
  C_COUNTRY          CONSTANT NUMBER(5)  := 37; -- Used in BI
  C_CSTANDES         CONSTANT NUMBER(5)  := 38; -- Used in BI 
  C_CSTANGRP         CONSTANT NUMBER(5)  := 39; -- Used in BI 
  C_CSTANREC         CONSTANT NUMBER(5)  := 40; -- Used in BI 
  C_FIXEDROUTES      CONSTANT NUMBER(5)  := 41; -- Used in BI 
  C_HOFCST           CONSTANT NUMBER(5)  := 42; -- Used in BI 
  C_PRDGROUPCAT      CONSTANT NUMBER(5)  := 43; -- Used in BI
  C_PRDGROUPCATREC   CONSTANT NUMBER(5)  := 44; -- Used in BI
  C_PRDGROUPGRP      CONSTANT NUMBER(5)  := 45; -- Used in BI
  C_PRDGROUPGRPREC   CONSTANT NUMBER(5)  := 46; -- Used in BI
  C_DGPHEADER        CONSTANT NUMBER(5)  := 47; -- Used in BI
  C_DGPDETAILS       CONSTANT NUMBER(5)  := 48; -- Used in BI
  C_DOCDISTCONTACTS  CONSTANT NUMBER(5)  := 49; -- Used in BI
 
    -- ACTION Constants
  C_CREATE           CONSTANT VARCHAR2(1)  := 'C';
  C_UPDATE           CONSTANT VARCHAR2(1)  := 'U';
  C_DELETE           CONSTANT VARCHAR2(1)  := 'D';
  
  
  -- System constants
  C_HH               CONSTANT VARCHAR2(1)  := 'H'; -- Processing is to transfer data to the Handheld staging database (HH)   
  C_BI               CONSTANT VARCHAR2(1)  := 'B'; -- Processing is to transfer data to the Business Information staging database (BI)

/* 
THIS PROCEDURE CALLED FROM TRIGGERS TO WRITE TO HH_TABLE_LASTUSED 
*/
  PROCEDURE INSERT_LASTUSED(IN_RECNO1 INTEGER, IN_RECNO2 INTEGER, IN_TABLEFLAG INTEGER, IN_OPERATIONTYPE VARCHAR2);
    


  PROCEDURE PROCESS_ALL;    /*  THIS PROCEDURE CALLS ALL THE OTHER PROCESS_***** PROCEDURES AND TAKES CHANGED RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO THE TRANSFER TABLE   */
  PROCEDURE PROCESS_PRDRECS;    /* THIS PROCEDURE TAKES PRDREC RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_PRDREC */
  PROCEDURE PROCESS_PRDALLDESCS;    /* THIS PROCEDURE TAKES PRDALLDESCS RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_PRDALLDESCS */
  PROCEDURE PROCESS_PRDRECTOSO; /* THIS PROCEDURE TAKES PRDRECTOSO RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_PRDRECTOSO */  
  PROCEDURE PROCESS_LOGONS; /* THIS PROCEDURE TAKES LOGONS RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_LOGONS */
  PROCEDURE PROCESS_LOGTOSALOFF ; /* THIS PROCEDURE TAKES LOGTOSALOFF RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_LOGTOSALOFF*/
  PROCEDURE PROCESS_SALOFFNO; /* THIS PROCEDURE TAKES SALOFFNO RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_SALOFFNO */
  PROCEDURE PROCESS_DEPARTMENTS; /* THIS PROCEDURE TAKES DEPARTMENTS RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_SALOFFNO */
  PROCEDURE PROCESS_DPTTOSALOFFNO; /* THIS PROCEDURE TAKES DPTTOSALOFFNO RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_SALOFFNO */
  PROCEDURE PROCESS_SMN; /* THIS PROCEDURE TAKES SMN RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_SMN */
  PROCEDURE PROCESS_SMNTOLOGON; /* THIS PROCEDURE TAKES SMNTOLOGON RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_SMNTOLOGON */
  PROCEDURE PROCESS_DEPARTMENTSTOSMN; /* THIS PROCEDURE TAKES DEPARTMENTSTOSMN RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_DEPARTMENTSTOSMN */
  PROCEDURE PROCESS_SOFTOSTCLOC; /* THIS PROCEDURE TAKES SOFTOSTCLOC RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_SOFTOSTCLOC */
  PROCEDURE PROCESS_VATRATES; /* THIS PROCEDURE TAKES VATRATES RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_VATRATES */
  PROCEDURE PROCESS_ACCCLASS; /* THIS PROCEDURE TAKES ACCCLASS RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_ACCCLASS */
  PROCEDURE PROCESS_ACCTOSALOFF; /* THIS PROCEDURE TAKES ACCTOSALOFF RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_ACCTOSALOFF */
  PROCEDURE PROCESS_ACCCAT; /* THIS PROCEDURE TAKES ACCCAT RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_ACCCAT */
  PROCEDURE PROCESS_DLVTYPE; /* THIS PROCEDURE TAKES DLVTYPE RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_DLVTYPE */
  PROCEDURE PROCESS_ALLOCATE; /* THIS PROCEDURE TAKES ALLOCATE RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_ALLOCATE */
  PROCEDURE PROCESS_LOTITE; /* THIS PROCEDURE TAKES LOTITE RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_LOTITE */
  /*PROCEDURE PROCESS_TKTBK; needs changing */ /* THIS PROCEDURE TAKES TKTBK RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_TKTBK */ 
  /*PROCEDURE PROCESS_TKTNT; no longer required /* THIS PROCEDURE TAKES TKTNT RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_TKTNT */
  PROCEDURE PROCESS_LOOKUPS; /* THIS PROCEDURE TAKES LOOKUP RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO HH_LOOKUPS */
  PROCEDURE PROCESS_HH_GUID; /* THIS PROCEDURE TAKES LOOKUP RECORDS FROM HH_TABLE_LASTUSED AND WRITES THEM TO TABLES WITH GUIDS (HH_ALLOCATE etc) */
  PROCEDURE PROCESS_NOT_NEEDED_FILES(IN_TABLEFLAG NUMBER, IN_SYSTEMTYPE VARCHAR2); 
  
  PROCEDURE REFLAG_ALL;   /* THIS PROCEDURE CALLS ALL THE REST OF THE REFLAG PROCEDURES  TO RESEND EVERTHING TO THE HH_TABLE_LASTUSED TABLE */
  PROCEDURE REFLAG_GENERIC(IN_TABLEFLAG NUMBER, IN_CURSOR SYS_REFCURSOR);   /* GENERIC PROCEDURE - TAKES A CURSOR AND FLAGS ALL IN IT TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED */
  PROCEDURE REFLAG_ALL_PRDRECS;   /* THIS PROCEDURE FLAGS ALL EXISTING PRDREC RECORDS TO BE RE-SENT - IE WRITES TO HH_TABLE_LASTUSED */
  PROCEDURE REFLAG_ALL_PRDALLDESCS;   /* THIS PROCEDURE FLAGS ALL EXISTING PRDALLDESCS RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_PRDRECTOSO;   /* THIS PROCEDURE FLAGS ALL EXISTING PRDRECTOSO RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED
                                        **NOTE** THERE IS NO NEED TO CALL REFLAG_ALL_PRDRECTOSO IF REFLAG_ALL_PRDRECS IS CALLED AS THAT WILL SEND ALL PRDRECTOSO RECORDS ANYWAY*/
  PROCEDURE REFLAG_ALL_LOGONS;   /* THIS PROCEDURE FLAGS ALL EXISTING LOGONS RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_LOGTOSALOFF;   /* THIS PROCEDURE FLAGS ALL EXISTING LOGTOSALOFF RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_SALOFFNO;   /* THIS PROCEDURE FLAGS ALL EXISTING SALOFFNO RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_DEPARTMENTS;   /* THIS PROCEDURE FLAGS ALL EXISTING DEPARTMENTS RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_DPTTOSALOFFNO;   /* THIS PROCEDURE FLAGS ALL EXISTING DPTTOSALOFFNO RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/  
  PROCEDURE REFLAG_ALL_SMN;   /* THIS PROCEDURE FLAGS ALL EXISTING SMN RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_SMNTOLOGON;   /* THIS PROCEDURE FLAGS ALL EXISTING SMNTOLOGON RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_DEPARTMENTSTOSMN;   /* THIS PROCEDURE FLAGS ALL EXISTING DEPARTMENTSTOSMN RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_SOFTOSTCLOC;   /* THIS PROCEDURE FLAGS ALL EXISTING SOFTOSTCLOC RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_VATRATES;   /* THIS PROCEDURE FLAGS ALL EXISTING VATRATES RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_ACCCLASS;   /* THIS PROCEDURE FLAGS ALL EXISTING ACCCLASS RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_ACCTOSALOFF;   /* THIS PROCEDURE FLAGS ALL EXISTING ACCTOSALOFF RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  -- select ACSCLARECNO, ACSSALOFFNO, ACSACCCODE, CONTNAME, CONTEMAILADDRESS from HH_ACCTOSALOFF CONTNAME, CONTEMAILADDRESS where from ?
  PROCEDURE REFLAG_ALL_ACCCAT;   /* THIS PROCEDURE FLAGS ALL EXISTING ACCCAT RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_DLVTYPE;   /* THIS PROCEDURE FLAGS ALL EXISTING DLVTYPE RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_ALLOCATE;   /* THIS PROCEDURE FLAGS ALL EXISTING ALLOCATE RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_LOTITE;   /* THIS PROCEDURE FLAGS ALL EXISTING LOTITE RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_TKTBK;   /* THIS PROCEDURE FLAGS ALL EXISTING TKTBK RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_TKTNT;   /* THIS PROCEDURE FLAGS ALL EXISTING TKTNT RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  PROCEDURE REFLAG_ALL_LOOKUPS;   /* THIS PROCEDURE FLAGS CERTAIN SPECIFIC LOOKUPS RECORDS TO BE RE-SENT  - IE WRITES TO HH_TABLE_LASTUSED*/
  
  /* IF A PRDREC CHANGES THEN ALL THE ASSOC PRDRECTOSO SHOULD BE PROCESSED AS THERE ARE CURRENTLY FIELDS ON THIS HH TABLE THAT ARE REALLY ON PRDREC-   
    THIS PROCEDURE DOES THAT */
  PROCEDURE REFLAG_PRDRECTOSO_FORPRDREC(IN_PRCPRDNO NUMBER, IN_OPERATIONTYPE VARCHAR2);   
  
  /* IF A SALOFFNO CHANGES THEN ALL THE ASSOC Departments SHOULD BE PROCESSED - 
    When a DptToSalOffNo table exists in FT this can be got rid of */
  PROCEDURE REFLAG_DPTTOSALOFFNO_S(IN_SALOFFNO NUMBER, IN_OPERATIONTYPE VARCHAR2);

   /* IF A DEPARTMENT CHANGES THEN ALL THE ASSOC SalOffNo SHOULD BE PROCESSED - 
    When a DptToSalOffNo table exists in FT this can be got rid of */
  PROCEDURE REFLAG_DPTTOSALOFFNO_D(IN_DPTRECNO NUMBER, IN_OPERATIONTYPE VARCHAR2);
 
  /*  DELETES A RECORD FROM HH_TABLE_LASTUSED  */    
  PROCEDURE DELETE_HH_TABLE_LASTUSED(IN_RECNO1 INTEGER, IN_RECNO2 INTEGER, IN_TABLEFLAG INTEGER, IN_OPERATIONTYPE VARCHAR2, IN_SYSTEMTYPE VARCHAR2 );
  
  /*  SET THIS TO EITHER C, U D BEFORE CALLING REFLAG PROCEDURE AND THE REFLAG WILL USE THIS TO DETERMINE WHAT TO DO
      EG 'C' WILL TREAT ALL REFLAGS AS A CREATE 
  */    
  PROCEDURE SET_GENERICREFLAGACTION(IN_OPERATIONTYPE VARCHAR2);   

  FUNCTION CURRENTVERSION (IN_BODYORSPEC IN INTEGER := 1) RETURN VARCHAR2;
  
  FUNCTION GETVATFORPRODUCT (IN_PRODUCT IN INTEGER, IN_SALESOFFICE IN INTEGER := -32000) RETURN INTEGER;

END FT_PK_HH;