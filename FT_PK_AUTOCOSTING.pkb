CREATE OR REPLACE PACKAGE BODY FT_PK_AUTOCOSTING AS
  
  cVersionControlNo   VARCHAR2(12) := '1.0.1'; -- Current Version Number
  
  PROCESSTODO     INTEGER := 1;
  PROCESSINPROG   INTEGER := 2;
  PROCESSLOT      INTEGER := 3;
  PROCESSJIT      INTEGER := 10;
  G_SID           INTEGER := SYS_CONTEXT('USERENV','SID');

  FUNCTION CURRENTVERSION(IN_BODYORSPEC IN INTEGER ) RETURN VARCHAR2
  IS
  BEGIN
    IF  IN_BODYORSPEC = CONST.C_SPEC THEN
      RETURN cSpecVersionControlNo;
    ELSE  
      RETURN cVersionControlNo;
    END IF;                
  END CURRENTVERSION;

  -- Helper Procedure to deal with looping of bulk exceptions --
  PROCEDURE LOG_BULK_DPR_ERRORS(DPRRECS_IN RECORD_NUMBERS, FTERR_IN IN FT_ERROR_CODES.FTERRORNO%TYPE)
  IS 
    PARAMETER_LIST    FT_PK_STRING_UTILS.TYPE_STRING_TOKENS;
    L_DPRRECNO        INTEGER;   
  BEGIN 
    FOR INDX IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
      BEGIN
        L_DPRRECNO := DPRRECS_IN(SQL%BULK_EXCEPTIONS(INDX).ERROR_INDEX);
        PARAMETER_LIST('#DPRRECNO') := L_DPRRECNO;
        FT_PK_ERRORS.RAISE_ERROR(FTERR_IN,  PARAMETER_LIST);           
      EXCEPTION
        WHEN OTHERS THEN
          FT_PK_ERRORS.LOG_AND_CONTINUE;
      END;
     END LOOP;
  END LOG_BULK_DPR_ERRORS;
  --------------------------------------------------------------
  -- Helper Procedure to deal with looping Of bulk exceptions --
  PROCEDURE LOG_BULK_LOT_ERRORS(LITRECS_IN RECORD_NUMBERS, FTERR_IN IN FT_ERROR_CODES.FTERRORNO%TYPE)
  IS 
    PARAMETER_LIST    FT_PK_STRING_UTILS.TYPE_STRING_TOKENS;
    L_LITITENO        INTEGER;   
  BEGIN 
    FOR INDX IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
      BEGIN
        L_LITITENO := LITRECS_IN(SQL%BULK_EXCEPTIONS(INDX).ERROR_INDEX);
        PARAMETER_LIST('#LITITENO') := L_LITITENO;
        FT_PK_ERRORS.RAISE_ERROR(FTERR_IN,  PARAMETER_LIST);           
      EXCEPTION
        WHEN OTHERS THEN
          FT_PK_ERRORS.LOG_AND_CONTINUE;
      END;
     END LOOP;
  END LOG_BULK_LOT_ERRORS;
  --------------------------------------------------------------

  PROCEDURE ENQUEUE_LITRECS(LITRECS_IN RECORD_NUMBERS, COSTCHNGTYPE_IN AUTOCOSTTYPES.COSTCHNGTYPENO%TYPE)
  IS
  BEGIN    
    BEGIN
      FORALL INDX IN INDICES OF LITRECS_IN SAVE EXCEPTIONS
        MERGE INTO AUTOCOSTSTODO AUTOCOSTSTODO
        USING(
              SELECT  LOTITE.LITITENO,
                      PROCESSTODO AS PROCESSSTAT,
                      G_SID AS SESSIONNO,
                      NVL((SELECT PORSALOFF FROM PURORD WHERE PORRECNO = LITPORREC), (SELECT PRESALOFFNO FROM PREWODOC, PREWORKS WHERE WODOCNO = PREWODOCNO AND WORECNO = LITWORECNO)) AS SALOFFNO,
                      BITOR(AUTOCOSTTYPES.WRITEPREPALINOUT, NVL(AUTOCOSTSTODO.WRITEPREPALINOUT, 0)) AS WRITEPREPALINOUT,
                      BITOR(AUTOCOSTTYPES.DOAUTCOSTADHOCCHGS, NVL(AUTOCOSTSTODO.DOAUTCOSTADHOCCHGS, 0)) AS DOAUTCOSTADHOCCHGS,
                      BITOR(AUTOCOSTTYPES.TRANSFERATCOST, NVL(AUTOCOSTSTODO.TRANSFERATCOST, 0)) AS TRANSFERATCOST,
                      BITOR(AUTOCOSTTYPES.CALCSALESCOSTDPRTABLE, NVL(AUTOCOSTSTODO.CALCSALESCOSTDPRTABLE, 0)) AS CALCSALESCOSTDPRTABLE,
                      BITOR(AUTOCOSTTYPES.TRANSFERADDCHGSAPP, NVL(AUTOCOSTSTODO.TRANSFERADDCHGSAPP, 0)) AS TRANSFERADDCHGSAPP,
                      BITOR(AUTOCOSTTYPES.CALCULATEGOODSCOST, NVL(AUTOCOSTSTODO.CALCULATEGOODSCOST, 0)) AS CALCULATEGOODSCOST,
                      BITOR(AUTOCOSTTYPES.LOTPROFITABILITY, NVL(AUTOCOSTSTODO.LOTPROFITABILITY, 0)) AS LOTPROFITABILITY,
                      BITOR(AUTOCOSTTYPES.RECALCULATEWOCOSTS, NVL(AUTOCOSTSTODO.RECALCULATEWOCOSTS, 0)) AS RECALCULATEWOCOSTS,
                      BITOR(AUTOCOSTTYPES.GETSALES, NVL(AUTOCOSTSTODO.GETSALES, 0)) AS GETSALES
              FROM LOTITE LOTITE
              LEFT OUTER JOIN AUTOCOSTSTODO AUTOCOSTSTODO
                ON LOTITE.LITITENO = AUTOCOSTSTODO.LITITENO AND AUTOCOSTSTODO.PROCESSSTAT = PROCESSTODO
              INNER JOIN AUTOCOSTTYPES AUTOCOSTTYPES
                ON AUTOCOSTTYPES.COSTCHNGTYPENO = COSTCHNGTYPE_IN
              WHERE LOTITE.LITITENO = LITRECS_IN(INDX)
              ) NEWAUTOCOSTREC
        ON (NEWAUTOCOSTREC.LITITENO = AUTOCOSTSTODO.LITITENO AND NEWAUTOCOSTREC.PROCESSSTAT = AUTOCOSTSTODO.PROCESSSTAT)
        WHEN MATCHED THEN
          UPDATE
          SET AUTOCOSTSTODO.SESSIONNO = NEWAUTOCOSTREC.SESSIONNO,
              AUTOCOSTSTODO.WRITEPREPALINOUT = NEWAUTOCOSTREC.WRITEPREPALINOUT,
              AUTOCOSTSTODO.DOAUTCOSTADHOCCHGS = NEWAUTOCOSTREC.DOAUTCOSTADHOCCHGS,
              AUTOCOSTSTODO.TRANSFERATCOST = NEWAUTOCOSTREC.TRANSFERATCOST,
              AUTOCOSTSTODO.CALCSALESCOSTDPRTABLE = NEWAUTOCOSTREC.CALCSALESCOSTDPRTABLE,
              AUTOCOSTSTODO.TRANSFERADDCHGSAPP = NEWAUTOCOSTREC.TRANSFERADDCHGSAPP,
              AUTOCOSTSTODO.CALCULATEGOODSCOST = NEWAUTOCOSTREC.CALCULATEGOODSCOST,
              AUTOCOSTSTODO.LOTPROFITABILITY = NEWAUTOCOSTREC.LOTPROFITABILITY,
              AUTOCOSTSTODO.RECALCULATEWOCOSTS = NEWAUTOCOSTREC.RECALCULATEWOCOSTS,
              AUTOCOSTSTODO.GETSALES = NEWAUTOCOSTREC.GETSALES
        WHEN NOT MATCHED THEN
          INSERT( AUTOCOSTSTODO.LITITENO,
                  AUTOCOSTSTODO.PROCESSSTAT,
                  AUTOCOSTSTODO.SESSIONNO,
                  AUTOCOSTSTODO.SALOFFNO,
                  AUTOCOSTSTODO.WRITEPREPALINOUT,
                  AUTOCOSTSTODO.DOAUTCOSTADHOCCHGS,
                  AUTOCOSTSTODO.TRANSFERATCOST,
                  AUTOCOSTSTODO.CALCSALESCOSTDPRTABLE,
                  AUTOCOSTSTODO.TRANSFERADDCHGSAPP,
                  AUTOCOSTSTODO.CALCULATEGOODSCOST,
                  AUTOCOSTSTODO.LOTPROFITABILITY,
                  AUTOCOSTSTODO.RECALCULATEWOCOSTS,
                  AUTOCOSTSTODO.GETSALES)
          VALUES( NEWAUTOCOSTREC.LITITENO,
                  NEWAUTOCOSTREC.PROCESSSTAT,
                  NEWAUTOCOSTREC.SESSIONNO,
                  NEWAUTOCOSTREC.SALOFFNO,
                  NEWAUTOCOSTREC.WRITEPREPALINOUT,
                  NEWAUTOCOSTREC.DOAUTCOSTADHOCCHGS,
                  NEWAUTOCOSTREC.TRANSFERATCOST,
                  NEWAUTOCOSTREC.CALCSALESCOSTDPRTABLE,
                  NEWAUTOCOSTREC.TRANSFERADDCHGSAPP,
                  NEWAUTOCOSTREC.CALCULATEGOODSCOST,
                  NEWAUTOCOSTREC.LOTPROFITABILITY,
                  NEWAUTOCOSTREC.RECALCULATEWOCOSTS,
                  NEWAUTOCOSTREC.GETSALES);
      COMMIT;
    EXCEPTION
      WHEN FT_PK_ERRNUMS.EXC_DML_ERRORS THEN
        COMMIT;
        LOG_BULK_LOT_ERRORS(LITRECS_IN, FT_PK_ERRNUMS.FT_ENQUEUE_LIT);
      WHEN OTHERS THEN
        ROLLBACK;
        FT_PK_ERRORS.LOG_AND_STOP;
    END;
  END ENQUEUE_LITRECS;
  
  PROCEDURE ENQUEUE_DPRRECS(DPRRECS_IN RECORD_NUMBERS, COSTCHNGTYPE_IN AUTOCOSTTYPES.COSTCHNGTYPENO%TYPE)
  IS
  BEGIN
    FORALL INDX IN INDICES OF DPRRECS_IN SAVE EXCEPTIONS
      MERGE INTO AUTOCOSTSTODO AUTOCOSTSTODO
      USING(
            SELECT  DELPRICE.DPRRECNO,
                    PROCESSTODO AS PROCESSSTAT,
                    G_SID AS SESSIONNO,
                    (SELECT DLVSALOFFNO FROM DELHED, DELDET WHERE DLVORDNO = DELDLVORDNO AND DELRECNO = DPRDELRECNO) AS SALOFFNO,
                    BITOR(AUTOCOSTTYPES.WRITEPREPALINOUT, NVL(AUTOCOSTSTODO.WRITEPREPALINOUT, 0)) AS WRITEPREPALINOUT,
                    BITOR(AUTOCOSTTYPES.DOAUTCOSTADHOCCHGS, NVL(AUTOCOSTSTODO.DOAUTCOSTADHOCCHGS, 0)) AS DOAUTCOSTADHOCCHGS,
                    BITOR(AUTOCOSTTYPES.TRANSFERATCOST, NVL(AUTOCOSTSTODO.TRANSFERATCOST, 0)) AS TRANSFERATCOST,
                    BITOR(AUTOCOSTTYPES.CALCSALESCOSTDPRTABLE, NVL(AUTOCOSTSTODO.CALCSALESCOSTDPRTABLE, 0)) AS CALCSALESCOSTDPRTABLE,
                    BITOR(AUTOCOSTTYPES.TRANSFERADDCHGSAPP, NVL(AUTOCOSTSTODO.TRANSFERADDCHGSAPP, 0)) AS TRANSFERADDCHGSAPP,
                    BITOR(AUTOCOSTTYPES.CALCULATEGOODSCOST, NVL(AUTOCOSTSTODO.CALCULATEGOODSCOST, 0)) AS CALCULATEGOODSCOST,
                    BITOR(AUTOCOSTTYPES.LOTPROFITABILITY, NVL(AUTOCOSTSTODO.LOTPROFITABILITY, 0)) AS LOTPROFITABILITY,
                    BITOR(AUTOCOSTTYPES.RECALCULATEWOCOSTS, NVL(AUTOCOSTSTODO.RECALCULATEWOCOSTS, 0)) AS RECALCULATEWOCOSTS,
                    BITOR(AUTOCOSTTYPES.GETSALES, NVL(AUTOCOSTSTODO.GETSALES, 0)) AS GETSALES
            FROM DELPRICE DELPRICE
            LEFT OUTER JOIN AUTOCOSTSTODO AUTOCOSTSTODO
              ON DELPRICE.DPRRECNO = AUTOCOSTSTODO.DPRRECNO AND AUTOCOSTSTODO.PROCESSSTAT = PROCESSTODO
            INNER JOIN AUTOCOSTTYPES AUTOCOSTTYPES
              ON AUTOCOSTTYPES.COSTCHNGTYPENO = COSTCHNGTYPE_IN
            WHERE DELPRICE.DPRRECNO = DPRRECS_IN(INDX)
            ) NEWAUTOCOSTREC
      ON (NEWAUTOCOSTREC.DPRRECNO = AUTOCOSTSTODO.DPRRECNO AND NEWAUTOCOSTREC.PROCESSSTAT = AUTOCOSTSTODO.PROCESSSTAT)
      WHEN MATCHED THEN
          UPDATE
          SET AUTOCOSTSTODO.SESSIONNO = NEWAUTOCOSTREC.SESSIONNO,
              AUTOCOSTSTODO.WRITEPREPALINOUT = NEWAUTOCOSTREC.WRITEPREPALINOUT,
              AUTOCOSTSTODO.DOAUTCOSTADHOCCHGS = NEWAUTOCOSTREC.DOAUTCOSTADHOCCHGS,
              AUTOCOSTSTODO.TRANSFERATCOST = NEWAUTOCOSTREC.TRANSFERATCOST,
              AUTOCOSTSTODO.CALCSALESCOSTDPRTABLE = NEWAUTOCOSTREC.CALCSALESCOSTDPRTABLE,
              AUTOCOSTSTODO.TRANSFERADDCHGSAPP = NEWAUTOCOSTREC.TRANSFERADDCHGSAPP,
              AUTOCOSTSTODO.CALCULATEGOODSCOST = NEWAUTOCOSTREC.CALCULATEGOODSCOST,
              AUTOCOSTSTODO.LOTPROFITABILITY = NEWAUTOCOSTREC.LOTPROFITABILITY,
              AUTOCOSTSTODO.RECALCULATEWOCOSTS = NEWAUTOCOSTREC.RECALCULATEWOCOSTS,
              AUTOCOSTSTODO.GETSALES = NEWAUTOCOSTREC.GETSALES
      WHEN NOT MATCHED THEN
        INSERT(   AUTOCOSTSTODO.DPRRECNO,
                  AUTOCOSTSTODO.PROCESSSTAT,
                  AUTOCOSTSTODO.SESSIONNO,
                  AUTOCOSTSTODO.SALOFFNO,
                  AUTOCOSTSTODO.WRITEPREPALINOUT,
                  AUTOCOSTSTODO.DOAUTCOSTADHOCCHGS,
                  AUTOCOSTSTODO.TRANSFERATCOST,
                  AUTOCOSTSTODO.CALCSALESCOSTDPRTABLE,
                  AUTOCOSTSTODO.TRANSFERADDCHGSAPP,
                  AUTOCOSTSTODO.CALCULATEGOODSCOST,
                  AUTOCOSTSTODO.LOTPROFITABILITY,
                  AUTOCOSTSTODO.RECALCULATEWOCOSTS,
                  AUTOCOSTSTODO.GETSALES)
         VALUES(  NEWAUTOCOSTREC.DPRRECNO,
                  NEWAUTOCOSTREC.PROCESSSTAT,
                  NEWAUTOCOSTREC.SESSIONNO,
                  NEWAUTOCOSTREC.SALOFFNO,
                  NEWAUTOCOSTREC.WRITEPREPALINOUT,
                  NEWAUTOCOSTREC.DOAUTCOSTADHOCCHGS,
                  NEWAUTOCOSTREC.TRANSFERATCOST,
                  NEWAUTOCOSTREC.CALCSALESCOSTDPRTABLE,
                  NEWAUTOCOSTREC.TRANSFERADDCHGSAPP,
                  NEWAUTOCOSTREC.CALCULATEGOODSCOST,
                  NEWAUTOCOSTREC.LOTPROFITABILITY,
                  NEWAUTOCOSTREC.RECALCULATEWOCOSTS,
                  NEWAUTOCOSTREC.GETSALES);
    COMMIT;
  EXCEPTION
    WHEN FT_PK_ERRNUMS.EXC_DML_ERRORS THEN
      COMMIT;
      LOG_BULK_DPR_ERRORS(DPRRECS_IN, FT_PK_ERRNUMS.FT_ENQUEUE_DPR);
    WHEN OTHERS THEN  
      ROLLBACK;
      FT_PK_ERRORS.LOG_AND_STOP;
  END ENQUEUE_DPRRECS;
  
  PROCEDURE ENQUEUE_LIT(LITITENO_IN AUTOCOSTSTODO.LITITENO%TYPE,
                        COSTCHNGTYPE_IN AUTOCOSTTYPES.COSTCHNGTYPENO%TYPE)
  IS
  BEGIN
    ENQUEUE_LITRECS(RECORD_NUMBERS(LITITENO_IN), COSTCHNGTYPE_IN);
  END ENQUEUE_LIT;
  
  
  PROCEDURE ENQUEUE_DPR(DPRRECNO_IN AUTOCOSTSTODO.DPRRECNO%TYPE,
                        COSTCHNGTYPE_IN AUTOCOSTTYPES.COSTCHNGTYPENO%TYPE)
  IS
  BEGIN
    ENQUEUE_DPRRECS(RECORD_NUMBERS(DPRRECNO_IN), COSTCHNGTYPE_IN);
  END ENQUEUE_DPR;                        
  
  PROCEDURE PRIORITISE_LITRECS(LITRECS_IN RECORD_NUMBERS)
  IS
  BEGIN
    BEGIN
      FORALL INDX IN INDICES OF LITRECS_IN SAVE EXCEPTIONS
        UPDATE AUTOCOSTSTODO
        SET 	PROCESSSTAT = PROCESSJIT,
              SESSIONNO = G_SID
        WHERE LITITENO = LITRECS_IN(INDX);
        COMMIT;
    EXCEPTION
      WHEN FT_PK_ERRNUMS.EXC_DML_ERRORS THEN
        COMMIT;
        LOG_BULK_LOT_ERRORS(LITRECS_IN, FT_PK_ERRNUMS.FT_PRIORITISE_LIT);
      WHEN OTHERS THEN
        ROLLBACK;
        FT_PK_ERRORS.LOG_AND_STOP;
    END;
    
    BEGIN
      FORALL INDX IN INDICES OF LITRECS_IN SAVE EXCEPTIONS
        UPDATE AUTOCOSTSTODO
        SET 	PROCESSSTAT = PROCESSJIT,
              SESSIONNO = G_SID
        WHERE  EXISTS(SELECT *
                      FROM ITESTO ITESTO
                      INNER JOIN DELTOIST DELTOIST
                        ON DELTOIST.DISISTRECNO = ITESTO.ISTRECNO
                      WHERE AUTOCOSTSTODO.DPRRECNO = DELTOIST.DISDPRRECNO
                        AND ITESTO.ISTLITNO = LITRECS_IN(INDX));
        COMMIT;
    EXCEPTION
      WHEN FT_PK_ERRNUMS.EXC_DML_ERRORS THEN
        COMMIT;
        LOG_BULK_LOT_ERRORS(LITRECS_IN, FT_PK_ERRNUMS.FT_PRIORITISE_LIT);
      WHEN OTHERS THEN
        ROLLBACK;
        FT_PK_ERRORS.LOG_AND_STOP;
    END;    
    
    BEGIN
      FORALL INDX IN INDICES OF LITRECS_IN SAVE EXCEPTIONS
        UPDATE AUTOCOSTSTODO
        SET 	PROCESSSTAT = PROCESSJIT,
              SESSIONNO = G_SID
        WHERE EXISTS(	SELECT *
                      FROM ITESTO ITESTO
                      INNER JOIN PREPALINOUT PREPALINOUT
                        ON ITESTO.ISTRECNO = PREPALINOUT.PALINBULKISTREC
                      INNER JOIN PREPALINOUTSALES PREPALINOUTSALES
                        ON PREPALINOUT.PREPALRECNO = PREPALINOUTSALES.PREPALINOUTRECNO
                      WHERE AUTOCOSTSTODO.DPRRECNO = PREPALINOUTSALES.DELPRCRECNO
                        AND ITESTO.ISTLITNO = LITRECS_IN(INDX));
      COMMIT;
    EXCEPTION
      WHEN FT_PK_ERRNUMS.EXC_DML_ERRORS THEN
        COMMIT;
        LOG_BULK_LOT_ERRORS(LITRECS_IN, FT_PK_ERRNUMS.FT_PRIORITISE_LIT);
      WHEN OTHERS THEN
        ROLLBACK;
        FT_PK_ERRORS.LOG_AND_STOP;
    END;    
    
    BEGIN
      FORALL INDX IN INDICES OF LITRECS_IN SAVE EXCEPTIONS
        UPDATE AUTOCOSTSTODO
        SET 	PROCESSSTAT = PROCESSJIT,
              SESSIONNO = G_SID
        WHERE EXISTS(	SELECT *
                      FROM  ITESTO ITESTO
                      INNER JOIN PALNOLOC PALNOLOC
                        ON ITESTO.ISTRECNO = PALNOLOC.PALLOCISTRECNO
                      INNER JOIN DELTOALL DELTOALL
                        ON PALNOLOC.PALLOCALLNO = DELTOALL.DALALLOCNO
                      INNER JOIN  DELPRICE DELPRICE
                        ON DELTOALL.DALTYPERECNO = DELPRICE.DPRDELRECNO AND DELTOALL.DALRECORDTYPE = 1
                      WHERE AUTOCOSTSTODO.DPRRECNO = DELPRICE.DPRRECNO
                        AND ITESTO.ISTLITNO = LITRECS_IN(INDX));  
      COMMIT;
    EXCEPTION
      WHEN FT_PK_ERRNUMS.EXC_DML_ERRORS THEN
        COMMIT;
        LOG_BULK_LOT_ERRORS(LITRECS_IN, FT_PK_ERRNUMS.FT_PRIORITISE_LIT);
      WHEN OTHERS THEN
        ROLLBACK;
        FT_PK_ERRORS.LOG_AND_STOP;
    END;       
    
    BEGIN
      FORALL INDX IN INDICES OF LITRECS_IN SAVE EXCEPTIONS
        UPDATE AUTOCOSTSTODO
        SET 	PROCESSSTAT = PROCESSJIT,
              SESSIONNO = G_SID
        WHERE EXISTS(	SELECT *
                      FROM ITESTO ITESTO
                      INNER JOIN PREPALINOUT PREPALINOUT
                        ON ITESTO.ISTRECNO = PREPALINOUT.PALINBULKISTREC
                      INNER JOIN PALNOLOC PALNOLOC
                        ON PREPALINOUT.PPPALLOCRECNOOUT = PALNOLOC.PALLOCRECNO
                      INNER JOIN DELTOALL DELTOALL
                        ON PALNOLOC.PALLOCALLNO = DELTOALL.DALALLOCNO
                      INNER JOIN  DELPRICE DELPRICE
                        ON DELTOALL.DALTYPERECNO = DELPRICE.DPRDELRECNO AND DELTOALL.DALRECORDTYPE = 1
                      WHERE AUTOCOSTSTODO.DPRRECNO = DELPRICE.DPRRECNO
                        AND ITESTO.ISTLITNO = LITRECS_IN(INDX));
      COMMIT;
    EXCEPTION
      WHEN FT_PK_ERRNUMS.EXC_DML_ERRORS THEN 
        COMMIT;
        LOG_BULK_LOT_ERRORS(LITRECS_IN, FT_PK_ERRNUMS.FT_PRIORITISE_LIT);
      WHEN OTHERS THEN
        ROLLBACK;
        FT_PK_ERRORS.LOG_AND_STOP;
    END;   
  END PRIORITISE_LITRECS;
  
  PROCEDURE PRIORITISE_LIT(LITITENO_IN AUTOCOSTSTODO.LITITENO%TYPE)
  IS
  BEGIN
    PRIORITISE_LITRECS(RECORD_NUMBERS(LITITENO_IN));
  END PRIORITISE_LIT;

  PROCEDURE PRIORITISE_DPRRECS(DPRRECS_IN RECORD_NUMBERS)
  IS
  BEGIN
    BEGIN
      FORALL INDX IN INDICES OF DPRRECS_IN SAVE EXCEPTIONS
        UPDATE AUTOCOSTSTODO
        SET 	PROCESSSTAT = PROCESSJIT,
              SESSIONNO = G_SID
        WHERE DPRRECNO = DPRRECS_IN(INDX);
        COMMIT;
    EXCEPTION
      WHEN FT_PK_ERRNUMS.EXC_DML_ERRORS THEN
        COMMIT;
        LOG_BULK_DPR_ERRORS(DPRRECS_IN, FT_PK_ERRNUMS.FT_PRIORITISE_DPR);
      WHEN OTHERS THEN
        ROLLBACK;
        FT_PK_ERRORS.LOG_AND_STOP;
    END;
    
    BEGIN
      FORALL INDX IN INDICES OF DPRRECS_IN SAVE EXCEPTIONS
        UPDATE AUTOCOSTSTODO
        SET 	PROCESSSTAT = PROCESSJIT,
          		SESSIONNO = G_SID
        WHERE EXISTS(	SELECT *
                      FROM ITESTO ITESTO
                      INNER JOIN DELTOIST DELTOIST
                        ON DELTOIST.DISISTRECNO = ITESTO.ISTRECNO
                      WHERE AUTOCOSTSTODO.LITITENO = ITESTO.ISTLITNO
                        AND DELTOIST.DISDPRRECNO = DPRRECS_IN(INDX));
    EXCEPTION
      WHEN FT_PK_ERRNUMS.EXC_DML_ERRORS THEN
        COMMIT;
        LOG_BULK_DPR_ERRORS(DPRRECS_IN, FT_PK_ERRNUMS.FT_PRIORITISE_DPR);
      WHEN OTHERS THEN
        ROLLBACK;
        FT_PK_ERRORS.LOG_AND_STOP;
    END;    
    
    BEGIN
      FORALL INDX IN INDICES OF DPRRECS_IN SAVE EXCEPTIONS
        UPDATE AUTOCOSTSTODO
        SET 	PROCESSSTAT = PROCESSJIT,
              SESSIONNO = G_SID
        WHERE EXISTS(	SELECT *
                      FROM ITESTO ITESTO
                      INNER JOIN PREPALINOUT PREPALINOUT
                        ON ITESTO.ISTRECNO = PREPALINOUT.PALINBULKISTREC
                      INNER JOIN PREPALINOUTSALES PREPALINOUTSALES
                        ON PREPALINOUT.PREPALRECNO = PREPALINOUTSALES.PREPALINOUTRECNO
                      WHERE AUTOCOSTSTODO.LITITENO = ITESTO.ISTLITNO
                        AND PREPALINOUTSALES.DELPRCRECNO = DPRRECS_IN(INDX));
    EXCEPTION
      WHEN FT_PK_ERRNUMS.EXC_DML_ERRORS THEN
        LOG_BULK_DPR_ERRORS(DPRRECS_IN, FT_PK_ERRNUMS.FT_PRIORITISE_DPR);
      WHEN OTHERS THEN
        FT_PK_ERRORS.LOG_AND_STOP;
    END;    
    
    BEGIN
      FORALL INDX IN INDICES OF DPRRECS_IN SAVE EXCEPTIONS
        UPDATE AUTOCOSTSTODO
        SET 	PROCESSSTAT = PROCESSJIT,
              SESSIONNO = G_SID
        WHERE EXISTS(	SELECT *
                      FROM DELPRICE DELPRICE
                      INNER JOIN DELTOALL DELTOALL
                        ON DELTOALL.DALTYPERECNO = DELPRICE.DPRDELRECNO AND DELTOALL.DALRECORDTYPE = 1
                      INNER JOIN PALNOLOC PALNOLOC
                        ON PALNOLOC.PALLOCALLNO = DELTOALL.DALALLOCNO
                      INNER JOIN ITESTO ITESTO
                        ON ITESTO.ISTRECNO = PALNOLOC.PALLOCISTRECNO
                      WHERE AUTOCOSTSTODO.LITITENO = ITESTO.ISTLITNO
                        AND DELPRICE.DPRRECNO = DPRRECS_IN(INDX));
    EXCEPTION
      WHEN FT_PK_ERRNUMS.EXC_DML_ERRORS THEN
        LOG_BULK_DPR_ERRORS(DPRRECS_IN, FT_PK_ERRNUMS.FT_PRIORITISE_DPR);
      WHEN OTHERS THEN
        FT_PK_ERRORS.LOG_AND_STOP;
    END;      
    
    BEGIN
      FORALL INDX IN INDICES OF DPRRECS_IN SAVE EXCEPTIONS
        UPDATE AUTOCOSTSTODO
        SET 	PROCESSSTAT = PROCESSJIT,
              SESSIONNO = G_SID
        WHERE EXISTS(	SELECT *
                      FROM DELPRICE DELPRICE
                      INNER JOIN DELTOALL DELTOALL
                        ON DELTOALL.DALTYPERECNO = DELPRICE.DPRDELRECNO AND DELTOALL.DALRECORDTYPE = 1
                      INNER JOIN PALNOLOC PALNOLOC
                        ON PALNOLOC.PALLOCALLNO = DELTOALL.DALALLOCNO
                      INNER JOIN PREPALINOUT PREPALINOUT
                        ON PREPALINOUT.PPPALLOCRECNOOUT = PALNOLOC.PALLOCRECNO
                      INNER JOIN ITESTO ITESTO
                        ON ITESTO.ISTRECNO = PREPALINOUT.PALINBULKISTREC
                      WHERE AUTOCOSTSTODO.LITITENO = ITESTO.ISTLITNO
                        AND DELPRICE.DPRRECNO = DPRRECS_IN(INDX));
      COMMIT;
    EXCEPTION
      WHEN FT_PK_ERRNUMS.EXC_DML_ERRORS THEN
        LOG_BULK_DPR_ERRORS(DPRRECS_IN, FT_PK_ERRNUMS.FT_PRIORITISE_DPR);
      WHEN OTHERS THEN
        FT_PK_ERRORS.LOG_AND_STOP;
    END;     
  END PRIORITISE_DPRRECS;
  
  PROCEDURE PRIORITISE_DPR(DPRRECNO_IN AUTOCOSTSTODO.DPRRECNO%TYPE)
  IS
  BEGIN
    PRIORITISE_DPRRECS(RECORD_NUMBERS(DPRRECNO_IN));
  END PRIORITISE_DPR;  
  
  PROCEDURE PRIORITISE_SALOFF(SALOFFNO_IN SALOFFNO.SALOFFNO%TYPE)
  IS
    L_SALOFFNO      SALOFFNO.SALOFFNO%TYPE;
    SQL_STMT        VARCHAR2(2000);
  BEGIN
    L_SALOFFNO :=  NULLIF(SALOFFNO_IN, CONST.C_ALL);
    
    SQL_STMT := 'UPDATE AUTOCOSTSTODO'  ||  CONST.CR ||
                'SET PROCESSSTAT = :PROCESSSTAT'  || ',' || CONST.CR ||
                '    SESSIONNO = :SID'  ||  CONST.CR ||
                'WHERE SALOFFNO = :SALOFFNO';     
    EXECUTE IMMEDIATE SQL_STMT USING PROCESSJIT, G_SID, L_SALOFFNO;
    COMMIT;  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      FT_PK_ERRORS.LOG_AND_STOP; 
  END PRIORITISE_SALOFF;
  
  PROCEDURE PRIORITISE_ALL
  IS 
  BEGIN
    PRIORITISE_SALOFF(CONST.C_ALL);
  END PRIORITISE_ALL;
  
  PROCEDURE SET_IN_PROGRESS
  IS
  BEGIN    
    UPDATE AUTOCOSTSTODO
    SET PROCESSSTAT = PROCESSINPROG
    WHERE DprRecNo IN(SELECT dprtab.DprRecNo FROM AUTOCOSTS_DPRS dprtab);  
    COMMIT;                
  EXCEPTION
     WHEN OTHERS THEN
      ROLLBACK;
      FT_PK_ERRORS.LOG_AND_STOP;      
      
  END SET_IN_PROGRESS;
  
  PROCEDURE REMOVE_RECS
  IS
  BEGIN    
    DELETE FROM AUTOCOSTSTODO
    WHERE PROCESSSTAT = PROCESSINPROG 
      AND EXISTS(SELECT * FROM AUTOCOSTS_DPRS dprtab WHERE dprtab.DprRecNo = autocoststodo.DprRecNo);    
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    FT_PK_ERRORS.LOG_AND_STOP;   
  END REMOVE_RECS;
  
  PROCEDURE TRANSFORM_LOTS_PRIVATE(PROCESSSTAT_IN INTEGER)
  IS
    L_PROCESSSTAT     INTEGER;
    SQL_STMT          VARCHAR2(2000);
    SESS_STMT         VARCHAR2(2000);
    STAT_STMT         VARCHAR2(2000);
  BEGIN
    IF PROCESSSTAT_IN = PROCESSJIT THEN
      L_PROCESSSTAT := PROCESSJIT;
      SESS_STMT :=  ' AND SESSIONNO = ' || TO_CHAR(G_SID);
      STAT_STMT :=  ' AND PROCESSSTAT = ' || TO_CHAR(L_PROCESSSTAT);
    ELSE
      L_PROCESSSTAT := PROCESSTODO;
      SESS_STMT := '';
      STAT_STMT := '';
    END IF;
    
    SQL_STMT  :=  'UPDATE AUTOCOSTSTODO' || CONST.CR ||
                  'SET PROCESSSTAT = ' || TO_CHAR(PROCESSLOT) || CONST.CR ||
                  'WHERE LITITENO IS NOT NULL' || CONST.CR ||
                  SESS_STMT || CONST.CR ||
                  STAT_STMT;              
    EXECUTE IMMEDIATE SQL_STMT;    
               
    SQL_STMT  :=  'INSERT INTO AUTOCOSTSTODO( DPRRECNO,' || CONST.CR ||
                  '                           PROCESSSTAT,' || CONST.CR ||
                  '									          SESSIONNO,' || CONST.CR ||
                  '									          SALOFFNO,' || CONST.CR ||
                  '									          WRITEPREPALINOUT,' || CONST.CR ||
                  '									          DOAUTCOSTADHOCCHGS,' || CONST.CR ||
                  '									          TRANSFERATCOST,' || CONST.CR ||
                  '									          CALCSALESCOSTDPRTABLE,' || CONST.CR ||
                  '									          TRANSFERADDCHGSAPP,' || CONST.CR ||
                  '									          CALCULATEGOODSCOST,' || CONST.CR ||
                  '									          LOTPROFITABILITY,' || CONST.CR ||
                  '									          RECALCULATEWOCOSTS,' || CONST.CR ||
                  '									          GETSALES)' || CONST.CR ||
                  'SELECT	DISTINCT  DELTOIST.DISDPRRECNO,' || CONST.CR ||
                  '				          ' || TO_CHAR(L_PROCESSSTAT) || ',' || CONST.CR ||
                  '			            AUTOCOSTSTODO.SESSIONNO,' || CONST.CR ||
                  '				          AUTOCOSTSTODO.SALOFFNO,' || CONST.CR ||
                  '				          AUTOCOSTSTODO.WRITEPREPALINOUT,' || CONST.CR ||
                  '				          AUTOCOSTSTODO.DOAUTCOSTADHOCCHGS,' || CONST.CR ||
                  '				          AUTOCOSTSTODO.TRANSFERATCOST,' || CONST.CR ||
                  '				          AUTOCOSTSTODO.CALCSALESCOSTDPRTABLE,' || CONST.CR ||
                  '				          AUTOCOSTSTODO.TRANSFERADDCHGSAPP,' || CONST.CR ||
                  '				          AUTOCOSTSTODO.CALCULATEGOODSCOST,' || CONST.CR ||
                  '				          AUTOCOSTSTODO.LOTPROFITABILITY,' || CONST.CR ||
                  '				          AUTOCOSTSTODO.RECALCULATEWOCOSTS,' || CONST.CR ||
                  '				          AUTOCOSTSTODO.GETSALES' || CONST.CR ||
                  'FROM AUTOCOSTSTODO AUTOCOSTSTODO' || CONST.CR ||
                  'INNER JOIN ITESTO ITESTO' || CONST.CR ||
                  '	ON AUTOCOSTSTODO.LITITENO = ITESTO.ISTLITNO' || CONST.CR ||
                  'INNER JOIN DELTOIST DELTOIST' || CONST.CR ||
                  '	ON DELTOIST.DISISTRECNO = ITESTO.ISTRECNO' || CONST.CR ||
                  'WHERE AUTOCOSTSTODO.PROCESSSTAT = ' || TO_CHAR(PROCESSLOT) || CONST.CR ||
                  '  AND NOT EXISTS( SELECT *' || CONST.CR ||
                  '						      FROM AUTOCOSTSTODO AUTOCOSTSTODO' || CONST.CR ||
                  '						      WHERE AUTOCOSTSTODO.DPRRECNO = DELTOIST.DISDPRRECNO)' || CONST.CR ||
                  SESS_STMT;              
    EXECUTE IMMEDIATE SQL_STMT;             

    SQL_STMT  :=  'INSERT INTO AUTOCOSTSTODO( DPRRECNO,' || CONST.CR ||
                  '                           PROCESSSTAT,' || CONST.CR ||
                  '									          SESSIONNO,' || CONST.CR ||
                  '									          SALOFFNO,' || CONST.CR ||
                  '									          WRITEPREPALINOUT,' || CONST.CR ||
                  '									          DOAUTCOSTADHOCCHGS,' || CONST.CR ||
                  '									          TRANSFERATCOST,' || CONST.CR ||
                  '									          CALCSALESCOSTDPRTABLE,' || CONST.CR ||
                  '									          TRANSFERADDCHGSAPP,' || CONST.CR ||
                  '									          CALCULATEGOODSCOST,' || CONST.CR ||
                  '									          LOTPROFITABILITY,' || CONST.CR ||
                  '									          RECALCULATEWOCOSTS,' || CONST.CR ||
                  '									          GETSALES)' || CONST.CR ||
                  'SELECT  DISTINCT   PREPALINOUTSALES.DELPRCRECNO,' || CONST.CR ||
                  '				            ' || TO_CHAR(L_PROCESSSTAT) || ',' || CONST.CR ||
                  '			              AUTOCOSTSTODO.SESSIONNO,' || CONST.CR ||
                  ' 				          AUTOCOSTSTODO.SALOFFNO,' || CONST.CR ||
                  ' 				          AUTOCOSTSTODO.WRITEPREPALINOUT,' || CONST.CR ||
                  ' 				          AUTOCOSTSTODO.DOAUTCOSTADHOCCHGS,' || CONST.CR ||
                  ' 				          AUTOCOSTSTODO.TRANSFERATCOST,' || CONST.CR ||
                  ' 				          AUTOCOSTSTODO.CALCSALESCOSTDPRTABLE,' || CONST.CR ||
                  ' 				          AUTOCOSTSTODO.TRANSFERADDCHGSAPP,' || CONST.CR ||
                  ' 				          AUTOCOSTSTODO.CALCULATEGOODSCOST,' || CONST.CR ||
                  ' 				          AUTOCOSTSTODO.LOTPROFITABILITY,' || CONST.CR ||
                  ' 				          AUTOCOSTSTODO.RECALCULATEWOCOSTS,' || CONST.CR ||
                  ' 				          AUTOCOSTSTODO.GETSALES' || CONST.CR ||
                  'FROM AUTOCOSTSTODO AUTOCOSTSTODO' || CONST.CR ||
                  'INNER JOIN ITESTO ITESTO' || CONST.CR ||
                  '	ON AUTOCOSTSTODO.LITITENO = ITESTO.ISTLITNO' || CONST.CR ||
                  'INNER JOIN PREPALINOUT PREPALINOUT' || CONST.CR ||
                  ' ON ITESTO.ISTRECNO = PREPALINOUT.PALINBULKISTREC' || CONST.CR ||
                  'INNER JOIN PREPALINOUTSALES PREPALINOUTSALES' || CONST.CR ||
                  '	ON PREPALINOUT.PREPALRECNO = PREPALINOUTSALES.PREPALINOUTRECNO' || CONST.CR ||
                  'WHERE AUTOCOSTSTODO.PROCESSSTAT = ' || TO_CHAR(PROCESSLOT) || CONST.CR ||
                  '	AND NOT EXISTS( SELECT *' || CONST.CR ||
                  '						      FROM AUTOCOSTSTODO AUTOCOSTSTODO' || CONST.CR ||
                  '  					      WHERE AUTOCOSTSTODO.DPRRECNO = PREPALINOUTSALES.DELPRCRECNO)' || CONST.CR ||
                  SESS_STMT;              
    EXECUTE IMMEDIATE SQL_STMT; 
    
    SQL_STMT  :=  'DELETE FROM AUTOCOSTSTODO' ||  CONST.CR ||
                  'WHERE PROCESSSTAT = ' || TO_CHAR(PROCESSLOT) || CONST.CR ||
                  SESS_STMT;    
    EXECUTE IMMEDIATE SQL_STMT;
    
    COMMIT;    
  EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    FT_PK_ERRORS.LOG_AND_STOP;     
  END TRANSFORM_LOTS_PRIVATE;
  
  PROCEDURE TRANSFORM_LOTS
  IS
  BEGIN
    TRANSFORM_LOTS_PRIVATE(PROCESSTODO);
  END TRANSFORM_LOTS;
 
  PROCEDURE TRANSFORM_LOTS_JIT
  IS
  BEGIN
    TRANSFORM_LOTS_PRIVATE(PROCESSJIT);
  END TRANSFORM_LOTS_JIT;

  PROCEDURE ENQUEUE_DPRRECS_AA(
      DPRRECS_IN T_INTEGER_ARRAY,
      COSTCHNGTYPE_IN AUTOCOSTTYPES.COSTCHNGTYPENO%TYPE)
  AS
     DelPriceIds RECORD_NUMBERS := RECORD_NUMBERS();
  BEGIN
    for i in DPRRECS_IN.first..DPRRECS_IN.last
    LOOP
      DelPriceIds.EXTEND;
      DelPriceIds(i) := DPRRECS_IN(i);
    END LOOP;
    FT_PK_AUTOCOSTING.ENQUEUE_DPRRECS(DelPriceIds, COSTCHNGTYPE_IN);
    RETURN;
  END ENQUEUE_DPRRECS_AA;
            
END FT_PK_AUTOCOSTING ;
/
