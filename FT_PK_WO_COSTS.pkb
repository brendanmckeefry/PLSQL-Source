--
-- FT_PK_WO_COSTS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY FT_PK_WO_COSTS AS

  cVersionControlNo   VARCHAR2(12) := '1.0.1'; -- Current Version Number

  -- System Preferences putting them here in case they may be needed for multiple functions/procedures
  ADDTODELCOST      INTEGER := FT_PK_UTILS.GET_SYSPREF('ADDRECOVORCHGORBOTH');
  LRECCOST2NDCLASS  BOOLEAN := TO_BOOLEAN(FT_PK_UTILS.GET_SYSPREF('LRECCOST2NDCLASS'));
  
  FUNCTION CURRENTVERSION(IN_BODYORSPEC IN INTEGER ) RETURN VARCHAR2
  IS
  BEGIN
    IF  IN_BODYORSPEC = CONST.C_SPEC THEN
      RETURN cSpecVersionControlNo;
    ELSE  
      RETURN cVersionControlNo;
    END IF;                
  END CURRENTVERSION;
  
  PROCEDURE RECALCULATEWOCOSTS(BULKLOTITENOLI_IN IN LOTITE.LITITENO%TYPE) AS
    -- Variables
	DIVIDEBY 		  INTEGER;
	NEWRAWMATVAL  FLOAT;
  QTYUSED	      FLOAT;
	NEWPRDCOST    FLOAT;
	NEWDELCOST    FLOAT;
  TMPRECOVCHG   FLOAT;
	DELCOSTNU		  FLOAT; 
  -- Cursors
  CURSOR C_SELECT_TRANSFERACTS_BY_BULK(BULKLOTITE INTEGER) IS
  (SELECT TRANSFERACT.TACTRECNO,TRANSFERACT.WORECNO,TRANSFERACT.TRNRECNO,TRANSFERACT.ACTISTRECNOFRM, NVL(ITESTO.TRNCALCMETH,-99) TRNCALCMETH,
   ITESTO.ISTORGTRANISTREC, ITESTO.TRANSFERINQTY, ITESTO.TRNDELCOST,
   NVL((SELECT IST2.TRNCALCMETH FROM ITESTO IST2 WHERE IST2.ISTRECNO = ITESTO.ISTORGTRANISTREC),-99) NEWTRNCALCMETH,
   NVL(TRANSFERACT.QTYUSEDDEC,TRANSFERACT.QTYUSED) QTYUSEDDEC ,NVL((SELECT SUM(NVL(QTYUSED,0.00))
             FROM TRANSFERACT TRANSACT2
             WHERE TRANSFERACT.ACTISTRECNOFRM = TRANSACT2.ACTISTRECNOFRM
             AND TRANSFERACT.WORECNO =  TRANSACT2.WORECNO
             AND NVL(ISBULKCOSTAPP,0) <> 1),0) QTYUSED1,
  NVL((SELECT SUM(NVL(QTYUSEDDEC,0.00))
             FROM TRANSFERACT TRANSACT2
             WHERE TRANSFERACT.ACTISTRECNOFRM = TRANSACT2.ACTISTRECNOFRM
             AND TRANSFERACT.WORECNO =  TRANSACT2.WORECNO
             AND NVL(ISBULKCOSTAPP,0) <> 1),0) QTYUSEDDEC1, ISBULKCOSTAPP,
   TRANSFERACT.RAWMATVAL,TRANSFERACT.RECOVBF,TRANSFERACT.CHARGEBF,
   TRANSFERACT.RECOVTHIS,TRANSFERACT.CHARGETHIS,LOTITE.LITDELCOST,LOTITE.LITRCVCOMPLETE, 
   LOTITE.LITORGEXP, LOTITE.LITQTYRCV
   FROM TRANSFERACT, PREWORKS, ITESTO ,LOTITE 
   WHERE PREWORKS.WORECNO = TRANSFERACT.WORECNO 
   AND ITESTO.ISTRECNO = TRANSFERACT.ACTISTRECNOFRM  
   AND ITESTO.ISTLITNO = LOTITE.LITITENO 
  AND LOTITE.LITITENO = BULKLOTITE);
  
  CURSOR C_SELECT_TRANSFERACTS_BY_FIN(BULKLOTITE INTEGER) IS
   (SELECT TRANSFERACT.FINIHEDLITRECNO,SUM(NVL(TRANSFERACT.RAWMATVAL,0)) AS RAWMATVAL,
   SUM(NVL(TRANSFERACT.RECOVTHIS,0)) AS RECOVTHIS,
   SUM(NVL(TRANSFERACT.CHARGETHIS,0)) AS CHARGETHIS
   FROM TRANSFERACT
   WHERE TRANSFERACT.FINIHEDLITRECNO IN (SELECT TRANSACT1.FINIHEDLITRECNO
                                          FROM TRANSFERACT TRANSACT1, ITESTO
                                          WHERE TRANSACT1.ACTISTRECNOFRM = ITESTO.ISTRECNO 
                                          AND ITESTO.ISTLITNO = BULKLOTITE)
   GROUP BY TRANSFERACT.FINIHEDLITRECNO);

  BEGIN
  -- initialise variables
    DIVIDEBY:=0;
    NEWRAWMATVAL:=0.00;
    QTYUSED:=0.00;
    NEWPRDCOST:=0.00;
    NEWDELCOST:=0.00;
    TMPRECOVCHG:=0.00;
    DELCOSTNU:=0.00; 
    IF BULKLOTITENOLI_IN>0 THEN
    BEGIN  
      -- loop C_SELECT_TRANSFERACTS_BY_BULK to calculate new Transferact.RawMatVal for update
      FOR TRANSFERACTREC IN C_SELECT_TRANSFERACTS_BY_BULK(BULKLOTITENOLI_IN) LOOP
        NEWRAWMATVAL:=0.00;
        DIVIDEBY:=0;
        DELCOSTNU:=0.00;
        IF TRANSFERACTREC.ISTORGTRANISTREC > 0 AND TRANSFERACTREC.NEWTRNCALCMETH =0 THEN
        BEGIN
          SELECT ITESTO.TRANSFERINQTY, ITESTO.TRNDELCOST
          INTO DIVIDEBY,DELCOSTNU
          FROM ITESTO
          WHERE ITESTO.ISTRECNO = TRANSFERACTREC.ISTORGTRANISTREC;
        EXCEPTION -- adding an exception here as there should always be data found as this is a PK
        WHEN NO_DATA_FOUND THEN
          FT_PK_ERRORS.LOG_AND_STOP;
        WHEN OTHERS THEN
          FT_PK_ERRORS.LOG_AND_STOP;
        END;
        ELSE
          IF TRANSFERACTREC.TRNCALCMETH = 0 THEN
            DIVIDEBY := TRANSFERACTREC.TRANSFERINQTY;
            DELCOSTNU := TRANSFERACTREC.TRNDELCOST;
          ELSE
            DELCOSTNU :=TRANSFERACTREC.LITDELCOST;
            IF TRANSFERACTREC.LITRCVCOMPLETE = 'Y' THEN
              DIVIDEBY := TRANSFERACTREC.LITQTYRCV;
            ELSE
              DIVIDEBY := TRANSFERACTREC.LITORGEXP;
            END IF; -- transferactrec.LitRcvComplete = "Y"
          END IF; -- transferactrec.TrnCalcMeth = 0
        END IF; -- transferactrec.ISTORGTRANISTREC > 0 and transferactrec.NewTrnCalcMeth =0
        IF DIVIDEBY > 0.001 THEN
          IF LRECCOST2NDCLASS THEN
            QTYUSED := TRANSFERACTREC.QTYUSEDDEC;
            NEWRAWMATVAL := (DELCOSTNU * QTYUSED);
            NEWRAWMATVAL := NEWRAWMATVAL / DIVIDEBY; 
            NEWRAWMATVAL := NEWRAWMATVAL + TRANSFERACTREC.RECOVBF;
          ELSE
            IF TRANSFERACTREC.ISBULKCOSTAPP = 1 THEN
              IF TRANSFERACTREC.QTYUSEDDEC1 > 0.009 THEN
                QTYUSED := TRANSFERACTREC.QTYUSEDDEC + TRANSFERACTREC.QTYUSEDDEC1;
              ELSE
                QTYUSED := TRANSFERACTREC.QTYUSEDDEC + TRANSFERACTREC.QTYUSED1;
              END IF; -- transferactrec.QtyUsedDec1 > 0.009
              NEWRAWMATVAL := (DELCOSTNU * QTYUSED);
              NEWRAWMATVAL := NEWRAWMATVAL / DIVIDEBY; 
              NEWRAWMATVAL := NEWRAWMATVAL + TRANSFERACTREC.RECOVBF;
            END IF; -- transferactrec.ISBULKCOSTAPP = 1
           END IF; -- LRECCOST2NDCLASSLo
          NEWRAWMATVAL := ROUND(NEWRAWMATVAL,2); 
          UPDATE TRANSFERACT
          SET RAWMATVAL = NEWRAWMATVAL
          WHERE TACTRECNO = TRANSFERACTREC.TACTRECNO;
        END IF; -- DivideBy > 0.001
      END LOOP;     
      -- loop C_SELECT_TRANSFERACTS_BY_FIN to calculate new Lotite.LitPrdCost and Lotite.LitDelCost for update
      FOR TRANSFERACTREC IN C_SELECT_TRANSFERACTS_BY_FIN(BULKLOTITENOLI_IN) LOOP
        NEWPRDCOST:=0.00;
        NEWDELCOST:=0.00;
        TMPRECOVCHG:= 0;
        IF ADDTODELCOST = 1 THEN
          TMPRECOVCHG := TRANSFERACTREC.RECOVTHIS;
        ELSE
          IF ADDTODELCOST = 2 THEN
            TMPRECOVCHG := TRANSFERACTREC.CHARGETHIS;
          ELSE
            TMPRECOVCHG := TRANSFERACTREC.RECOVTHIS + TRANSFERACTREC.CHARGETHIS;
          END IF; -- ADDTODELCOST = 2
        END IF; -- ADDTODELCOST = 1 
        NEWPRDCOST := TRANSFERACTREC.RAWMATVAL;
        NEWPRDCOST := ROUND(NEWPRDCOST,2);
        NEWDELCOST := TRANSFERACTREC.RAWMATVAL + TMPRECOVCHG;
        NEWDELCOST := ROUND(NEWDELCOST,2);
        UPDATE LOTITE
        SET LITPRDCOST = NEWPRDCOST, LITDELCOST=NEWDELCOST
        WHERE LITITENO = TRANSFERACTREC.FINIHEDLITRECNO;
      END LOOP;
        
      COMMIT; -- All should be OK as no exceptions caught so Commit the transactions
    EXCEPTION -- Do a rollback and report error problem with the cursors!!!
    WHEN OTHERS THEN
      ROLLBACK;
      FT_PK_ERRORS.LOG_AND_STOP;
    END;
    END IF;
  END RECALCULATEWOCOSTS;

  PROCEDURE RECALCULATEWOCOSTS
  IS
  BEGIN
    FOR AUTOCOSTSREC IN (SELECT AUTOCOSTS_PROCESS.LITITENO FROM AUTOCOSTS_PROCESS WHERE AUTOCOSTS_PROCESS.RECALCULATEWOCOSTS = CONST.C_TRUE AND AUTOCOSTS_PROCESS.LITITENO > 0) LOOP
      RECALCULATEWOCOSTS(AUTOCOSTSREC.LITITENO);
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      FT_PK_ERRORS.LOG_AND_STOP;
  END RECALCULATEWOCOSTS;

END FT_PK_WO_COSTS;
/
